From 2306b998c5abc506976373fe01885d5cf2da0fb2 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 23 Mar 2020 21:26:53 +0100
Subject: [PATCH 32/33] port: block, bfq: invoke flush_idle_tree after
 reparent_active_queues in pd_offline

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-cgroup.c | 20 +++++++++++++-------
 1 file changed, 13 insertions(+), 7 deletions(-)

diff --git a/block/bfq-cgroup.c b/block/bfq-cgroup.c
index 4379962b4038..751cb40004a7 100644
--- a/block/bfq-cgroup.c
+++ b/block/bfq-cgroup.c
@@ -944,13 +944,6 @@ static void bfq_pd_offline(struct blkg_policy_data *pd)
 		BFQ_BUG_ON(!bfqg->sched_data.service_tree);
 		st = bfqg->sched_data.service_tree + i;
 
-		/*
-		 * The idle tree may still contain bfq_queues belonging
-		 * to exited task because they never migrated to a different
-		 * cgroup from the one being destroyed now.
-		 */
-		bfq_flush_idle_tree(st);
-
 		/*
 		 * It may happen that some queues are still active
 		 * (busy) upon group destruction (if the corresponding
@@ -964,6 +957,19 @@ static void bfq_pd_offline(struct blkg_policy_data *pd)
 		 * scheduler has taken no reference.
 		 */
 		bfq_reparent_active_queues(bfqd, bfqg, st, i);
+
+		/*
+		 * The idle tree may still contain bfq_queues
+		 * belonging to exited task because they never
+		 * migrated to a different cgroup from the one being
+		 * destroyed now. In addition, even
+		 * bfq_reparent_active_queues() may happen to add some
+		 * entities to the idle tree. It happens if, in some
+		 * of the calls to bfq_bfqq_move() performed by
+		 * bfq_reparent_active_queues(), the queue to move is
+		 * empty and gets expired.
+		 */
+		bfq_flush_idle_tree(st);
 		BFQ_BUG_ON(!RB_EMPTY_ROOT(&st->active));
 		BFQ_BUG_ON(!RB_EMPTY_ROOT(&st->idle));
 	}
-- 
2.26.0.51.ga7d14a4428

