From 45ff20cbce87b685636c92f5524550e1874190be Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Tue, 11 Feb 2020 12:34:33 +0800
Subject: [PATCH 4/6] bmq: Introduce __sched_fork().

---
 kernel/sched/bmq.c | 34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index 94175b6b08dc..d5ce39d5143f 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -2007,27 +2007,36 @@ int wake_up_state(struct task_struct *p, unsigned int state)
 /*
  * Perform scheduler related setup for a newly forked process p.
  * p is forked by current.
+ *
+ * __sched_fork() is basic setup used by init_idle() too:
  */
-int sched_fork(unsigned long __maybe_unused clone_flags, struct task_struct *p)
+static inline void __sched_fork(unsigned long clone_flags, struct task_struct *p)
 {
-	unsigned long flags;
-	int cpu = get_cpu();
-	struct rq *rq = this_rq();
+	p->on_rq			= 0;
+	p->on_cpu			= 0;
+	p->utime			= 0;
+	p->stime			= 0;
+	p->sched_time			= 0;
 
 #ifdef CONFIG_PREEMPT_NOTIFIERS
 	INIT_HLIST_HEAD(&p->preempt_notifiers);
 #endif
-	/* Should be reset in fork.c but done here for ease of BMQ patching */
-	p->on_cpu =
-	p->on_rq =
-	p->utime =
-	p->stime =
-	p->sched_time = 0;
 
 #ifdef CONFIG_COMPACTION
 	p->capture_control = NULL;
 #endif
+}
+
+/*
+ * fork()/clone()-time setup:
+ */
+int sched_fork(unsigned long clone_flags, struct task_struct *p)
+{
+	unsigned long flags;
+	int cpu = get_cpu();
+	struct rq *rq = this_rq();
 
+	__sched_fork(clone_flags, p);
 	/*
 	 * We mark the process as NEW here. This guarantees that
 	 * nobody will actually run it, and a signal or other external
@@ -5109,6 +5118,8 @@ void init_idle(struct task_struct *idle, int cpu)
 	struct rq *rq = cpu_rq(cpu);
 	unsigned long flags;
 
+	__sched_fork(0, idle);
+
 	raw_spin_lock_irqsave(&idle->pi_lock, flags);
 	raw_spin_lock(&rq->lock);
 	update_rq_clock(rq);
@@ -5116,9 +5127,8 @@ void init_idle(struct task_struct *idle, int cpu)
 	idle->last_ran = rq->clock_task;
 	idle->state = TASK_RUNNING;
 	idle->flags |= PF_IDLE;
-	/* Setting prio to illegal value shouldn't matter when never queued */
+	/* Setting prio to illegal value shouldn't matter as it will never be de/enqueued */
 	idle->prio = MAX_PRIO;
-
 	idle->bmq_idx = IDLE_TASK_SCHED_PRIO;
 	bmq_init_idle(&rq->queue, idle);
 
-- 
2.25.1.377.g2d2118b814.dirty

