From 813776f25e1c6e1cb7679524b0ccc36077929b92 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@redhat.com>
Date: Wed, 28 Aug 2019 07:59:40 +0200
Subject: [PATCH 2/6] Revert "bfq: Extract bfq_group_set_weight from
 bfq_io_set_weight_legacy"

This reverts commit fe2b013ea233a88e22d6c9a13f821a9d198deecd.
---
 block/bfq-cgroup.c | 60 ++++++++++++++++++++++------------------------
 1 file changed, 28 insertions(+), 32 deletions(-)

diff --git a/block/bfq-cgroup.c b/block/bfq-cgroup.c
index 41ad5d713d83..b3796a40a61a 100644
--- a/block/bfq-cgroup.c
+++ b/block/bfq-cgroup.c
@@ -842,36 +842,6 @@ static int bfq_io_show_weight(struct seq_file *sf, void *v)
 	return 0;
 }
 
-static void bfq_group_set_weight(struct bfq_group *bfqg, u64 weight)
-{
-	/*
-	 * Setting the prio_changed flag of the entity
-	 * to 1 with new_weight == weight would re-set
-	 * the value of the weight to its ioprio mapping.
-	 * Set the flag only if necessary.
-	 */
-	if ((unsigned short)weight != bfqg->entity.new_weight) {
-		bfqg->entity.new_weight = (unsigned short)weight;
-		/*
-		 * Make sure that the above new value has been
-		 * stored in bfqg->entity.new_weight before
-		 * setting the prio_changed flag. In fact,
-		 * this flag may be read asynchronously (in
-		 * critical sections protected by a different
-		 * lock than that held here), and finding this
-		 * flag set may cause the execution of the code
-		 * for updating parameters whose value may
-		 * depend also on bfqg->entity.new_weight (in
-		 * __bfq_entity_update_weight_prio).
-		 * This barrier makes sure that the new value
-		 * of bfqg->entity.new_weight is correctly
-		 * seen in that code.
-		 */
-		smp_wmb();
-		bfqg->entity.prio_changed = 1;
-	}
-}
-
 static int bfq_io_set_weight_legacy(struct cgroup_subsys_state *css,
 				    struct cftype *cftype,
 				    u64 val)
@@ -890,8 +860,34 @@ static int bfq_io_set_weight_legacy(struct cgroup_subsys_state *css,
 	hlist_for_each_entry(blkg, &blkcg->blkg_list, blkcg_node) {
 		struct bfq_group *bfqg = blkg_to_bfqg(blkg);
 
-		if (bfqg)
-			bfq_group_set_weight(bfqg, val);
+		if (!bfqg)
+			continue;
+		/*
+		 * Setting the prio_changed flag of the entity
+		 * to 1 with new_weight == weight would re-set
+		 * the value of the weight to its ioprio mapping.
+		 * Set the flag only if necessary.
+		 */
+		if ((unsigned short)val != bfqg->entity.new_weight) {
+			bfqg->entity.new_weight = (unsigned short)val;
+			/*
+			 * Make sure that the above new value has been
+			 * stored in bfqg->entity.new_weight before
+			 * setting the prio_changed flag. In fact,
+			 * this flag may be read asynchronously (in
+			 * critical sections protected by a different
+			 * lock than that held here), and finding this
+			 * flag set may cause the execution of the code
+			 * for updating parameters whose value may
+			 * depend also on bfqg->entity.new_weight (in
+			 * __bfq_entity_update_weight_prio).
+			 * This barrier makes sure that the new value
+			 * of bfqg->entity.new_weight is correctly
+			 * seen in that code.
+			 */
+			smp_wmb();
+			bfqg->entity.prio_changed = 1;
+		}
 	}
 	spin_unlock_irq(&blkcg->lock);
 
-- 
2.23.0

