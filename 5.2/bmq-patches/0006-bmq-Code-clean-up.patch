From 1f66e1116cca795139c125248c34b06451383f3c Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Wed, 6 Mar 2019 16:14:37 +0800
Subject: [PATCH 06/64] bmq: Code clean up.

---
 include/linux/sched.h         | 12 ------------
 include/uapi/linux/sched.h    |  2 +-
 kernel/sched/bmq.c            |  6 +-----
 kernel/trace/trace_selftest.c |  2 +-
 4 files changed, 3 insertions(+), 19 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 45740856a8ac..31465217306a 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1235,24 +1235,12 @@ struct task_struct {
 };
 
 #ifdef CONFIG_SCHED_BMQ
-void cpu_scaling(int cpu);
-void cpu_nonscaling(int cpu);
 #define tsk_seruntime(t)		((t)->sched_time)
 /* replace the uncertian rt_timeout with 0UL */
 #define tsk_rttimeout(t)		(0UL)
 #else /* CFS */
-extern int runqueue_is_locked(int cpu);
-static inline void cpu_scaling(int cpu)
-{
-}
-
-static inline void cpu_nonscaling(int cpu)
-{
-}
 #define tsk_seruntime(t)	((t)->se.sum_exec_runtime)
 #define tsk_rttimeout(t)	((t)->rt.timeout)
-
-#define iso_task(p)		(false)
 #endif /* !CONFIG_SCHED_BMQ */
 
 static inline struct pid *task_pid(struct task_struct *task)
diff --git a/include/uapi/linux/sched.h b/include/uapi/linux/sched.h
index 1260a535cc3b..ed4ee170bee2 100644
--- a/include/uapi/linux/sched.h
+++ b/include/uapi/linux/sched.h
@@ -38,7 +38,7 @@
 #define SCHED_FIFO		1
 #define SCHED_RR		2
 #define SCHED_BATCH		3
-/* SCHED_ISO: Implemented in BFS/MuQSS only */
+/* SCHED_ISO: reserved but not implemented yet */
 #define SCHED_IDLE		5
 #define SCHED_DEADLINE		6
 
diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index c5901f7af93d..127a5c5be648 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -233,11 +233,7 @@ static inline void
 bmq_insert(struct task_struct *p, struct rq *rq, int insert_head)
 {
 	p->bmq_idx = task_sched_prio(p);
-	/*
-	if (insert_head)
-		list_add(&p->bmq_node, &rq->queue.heads[p->bmq_idx]);
-	else*/
-		bmq_add_task(p, &rq->queue, p->bmq_idx);
+	bmq_add_task(p, &rq->queue, p->bmq_idx);
 	set_bit(p->bmq_idx, &rq->queue.bitmap[0]);
 	update_sched_rq_watermark(rq);
 }
diff --git a/kernel/trace/trace_selftest.c b/kernel/trace/trace_selftest.c
index cf96e29c047b..208788fcbb0e 100644
--- a/kernel/trace/trace_selftest.c
+++ b/kernel/trace/trace_selftest.c
@@ -1049,7 +1049,7 @@ static int trace_wakeup_test_thread(void *data)
 	/* Make this a -deadline thread */
 	static const struct sched_attr attr = {
 #ifdef CONFIG_SCHED_BMQ
-		/* No deadline on BFS, use RR */
+		/* No deadline on BMQ, use RR */
 		.sched_policy = SCHED_RR,
 #else
 		.sched_policy = SCHED_DEADLINE,
-- 
2.22.0.214.g8dca754b1e

