From 17cff7e29c2af437db9cab7d190c7c990294140b Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Fri, 9 Aug 2019 13:20:04 +0200
Subject: [PATCH 2/6] Revert "port: block, bfq: move update of waker and woken
 list to queue freeing"

This reverts commit 80397811b0ea0657b3340704714e322b0f270a02.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 44 +++++++++++++++-----------------------------
 1 file changed, 15 insertions(+), 29 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 5d278a505d45..862cc35b4519 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -5339,8 +5339,6 @@ static struct request *bfq_dispatch_request(struct blk_mq_hw_ctx *hctx)
  */
 void bfq_put_queue(struct bfq_queue *bfqq)
 {
-       struct bfq_queue *item;
-       struct hlist_node *n;
 #ifdef CONFIG_BFQ_GROUP_IOSCHED
 	struct bfq_group *bfqg = bfqq_group(bfqq);
 #endif
@@ -5395,33 +5393,6 @@ void bfq_put_queue(struct bfq_queue *bfqq)
 			bfqq->bfqd->burst_size--;
 	}
 
-	/*
-	 * bfqq does not exist any longer, so it cannot be woken by
-	 * any other queue, and cannot wake any other queue. Then bfqq
-	 * must be removed from the woken list of its possible waker
-	 * queue, and all queues in the woken list of bfqq must stop
-	 * having a waker queue. Strictly speaking, these updates
-	 * should be performed when bfqq remains with no I/O source
-	 * attached to it, which happens before bfqq gets freed. In
-	 * particular, this happens when the last process associated
-	 * with bfqq exits or gets associated with a different
-	 * queue. However, both events lead to bfqq being freed soon,
-	 * and dangling references would come out only after bfqq gets
-	 * freed. So these updates are done here, as a simple and safe
-	 * way to handle all cases.
-	 */
-	/* remove bfqq from woken list */
-	if (!hlist_unhashed(&bfqq->woken_list_node))
-		hlist_del_init(&bfqq->woken_list_node);
-
-	/* reset waker for all queues in woken list */
-	hlist_for_each_entry_safe(item, n, &bfqq->woken_list,
-				  woken_list_node) {
-		item->waker_bfqq = NULL;
-		bfq_clear_bfqq_has_waker(item);
-		hlist_del_init(&item->woken_list_node);
-	}
-	
 	if (bfqq->bfqd)
 		bfq_log_bfqq(bfqq->bfqd, bfqq, "%p freed", bfqq);
 
@@ -5453,6 +5424,9 @@ static void bfq_put_cooperator(struct bfq_queue *bfqq)
 
 static void bfq_exit_bfqq(struct bfq_data *bfqd, struct bfq_queue *bfqq)
 {
+	struct bfq_queue *item;
+	struct hlist_node *n;
+
 	if (bfqq == bfqd->in_service_queue) {
 		__bfq_bfqq_expire(bfqd, bfqq, BFQQE_BUDGET_TIMEOUT);
 		bfq_schedule_dispatch(bfqd);
@@ -5462,6 +5436,18 @@ static void bfq_exit_bfqq(struct bfq_data *bfqd, struct bfq_queue *bfqq)
 
 	bfq_put_cooperator(bfqq);
 
+	/* remove bfqq from woken list */
+	if (!hlist_unhashed(&bfqq->woken_list_node))
+		hlist_del_init(&bfqq->woken_list_node);
+
+	/* reset waker for all queues in woken list */
+	hlist_for_each_entry_safe(item, n, &bfqq->woken_list,
+				  woken_list_node) {
+		item->waker_bfqq = NULL;
+		bfq_clear_bfqq_has_waker(item);
+		hlist_del_init(&item->woken_list_node);
+	}
+
 	bfq_put_queue(bfqq); /* release process reference */
 }
 
-- 
2.23.0.rc1

