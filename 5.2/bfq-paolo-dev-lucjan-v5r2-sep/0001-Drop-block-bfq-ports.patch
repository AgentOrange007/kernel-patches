From 1505a57fb376cce5c6dafe0470a8dc1927b5ebf0 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 12 Aug 2019 14:58:59 +0200
Subject: [PATCH 1/4] Drop block-bfq ports

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 71 ++++++++++++++-------------------------------
 1 file changed, 22 insertions(+), 49 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 102ad98fd52d..9a72a34d192a 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -2122,13 +2122,12 @@ static void bfq_add_request(struct request *rq)
 		 * confirmed no later than during the next
 		 * I/O-plugging interval for bfqq.
 		 */
-		if (bfqd->last_completed_rq_bfqq &&
-                    !bfq_bfqq_has_short_ttime(bfqq) &&
+		if (!bfq_bfqq_has_short_ttime(bfqq) &&
 		    ktime_get_ns() - bfqd->last_completion <
 		    200 * NSEC_PER_USEC) {
 			if (bfqd->last_completed_rq_bfqq != bfqq &&
-                            bfqd->last_completed_rq_bfqq !=
-                            bfqq->waker_bfqq) {
+				   bfqd->last_completed_rq_bfqq !=
+				   bfqq->waker_bfqq) {
 				/*
 				 * First synchronization detected with
 				 * a candidate waker queue, or with a
@@ -2500,13 +2499,8 @@ static void bfq_request_merged(struct request_queue *q, struct request *req,
 	    blk_rq_pos(container_of(rb_prev(&req->rb_node),
 				    struct request, rb_node))) {
 		struct bfq_queue *bfqq = bfq_init_rq(req);
-		struct bfq_data *bfqd;
+		struct bfq_data *bfqd = bfqq->bfqd;
 		struct request *prev, *next_rq;
-                
-                if (!bfqq)
-			return;
-
-		bfqd = bfqq->bfqd;
 
 		/* Reposition request in its sort_list */
 		elv_rb_del(&bfqq->sort_list, req);
@@ -2562,9 +2556,6 @@ static void bfq_requests_merged(struct request_queue *q, struct request *rq,
 {
 	struct bfq_queue *bfqq = bfq_init_rq(rq),
 		*next_bfqq = bfq_init_rq(next);
-                
-        if (!bfqq)
-		return;
 
 	BFQ_BUG_ON(!RQ_BFQQ(rq));
 	BFQ_BUG_ON(!RQ_BFQQ(next)); /* this does not imply next is in a bfqq */
@@ -5340,8 +5331,6 @@ static struct request *bfq_dispatch_request(struct blk_mq_hw_ctx *hctx)
  */
 void bfq_put_queue(struct bfq_queue *bfqq)
 {
-       struct bfq_queue *item;
-       struct hlist_node *n;
 #ifdef CONFIG_BFQ_GROUP_IOSCHED
 	struct bfq_group *bfqg = bfqq_group(bfqq);
 #endif
@@ -5396,33 +5385,6 @@ void bfq_put_queue(struct bfq_queue *bfqq)
 			bfqq->bfqd->burst_size--;
 	}
 
-	/*
-	 * bfqq does not exist any longer, so it cannot be woken by
-	 * any other queue, and cannot wake any other queue. Then bfqq
-	 * must be removed from the woken list of its possible waker
-	 * queue, and all queues in the woken list of bfqq must stop
-	 * having a waker queue. Strictly speaking, these updates
-	 * should be performed when bfqq remains with no I/O source
-	 * attached to it, which happens before bfqq gets freed. In
-	 * particular, this happens when the last process associated
-	 * with bfqq exits or gets associated with a different
-	 * queue. However, both events lead to bfqq being freed soon,
-	 * and dangling references would come out only after bfqq gets
-	 * freed. So these updates are done here, as a simple and safe
-	 * way to handle all cases.
-	 */
-	/* remove bfqq from woken list */
-	if (!hlist_unhashed(&bfqq->woken_list_node))
-		hlist_del_init(&bfqq->woken_list_node);
-
-	/* reset waker for all queues in woken list */
-	hlist_for_each_entry_safe(item, n, &bfqq->woken_list,
-				  woken_list_node) {
-		item->waker_bfqq = NULL;
-		bfq_clear_bfqq_has_waker(item);
-		hlist_del_init(&item->woken_list_node);
-	}
-	
 	if (bfqq->bfqd)
 		bfq_log_bfqq(bfqq->bfqd, bfqq, "%p freed", bfqq);
 
@@ -5430,11 +5392,7 @@ void bfq_put_queue(struct bfq_queue *bfqq)
 	bfq_log_bfqq(bfqq->bfqd, bfqq, "putting blkg and bfqg %p\n", bfqg);
 	bfqg_and_blkg_put(bfqg);
 #endif
-	
-        if (bfqq->bfqd && bfqq->bfqd->last_completed_rq_bfqq == bfqq)
-		bfqq->bfqd->last_completed_rq_bfqq = NULL;
-        
-        kmem_cache_free(bfq_pool, bfqq);
+	kmem_cache_free(bfq_pool, bfqq);
 }
 
 static void bfq_put_cooperator(struct bfq_queue *bfqq)
@@ -5458,6 +5416,9 @@ static void bfq_put_cooperator(struct bfq_queue *bfqq)
 
 static void bfq_exit_bfqq(struct bfq_data *bfqd, struct bfq_queue *bfqq)
 {
+	struct bfq_queue *item;
+	struct hlist_node *n;
+
 	if (bfqq == bfqd->in_service_queue) {
 		__bfq_bfqq_expire(bfqd, bfqq, BFQQE_BUDGET_TIMEOUT);
 		bfq_schedule_dispatch(bfqd);
@@ -5467,6 +5428,18 @@ static void bfq_exit_bfqq(struct bfq_data *bfqd, struct bfq_queue *bfqq)
 
 	bfq_put_cooperator(bfqq);
 
+	/* remove bfqq from woken list */
+	if (!hlist_unhashed(&bfqq->woken_list_node))
+		hlist_del_init(&bfqq->woken_list_node);
+
+	/* reset waker for all queues in woken list */
+	hlist_for_each_entry_safe(item, n, &bfqq->woken_list,
+				  woken_list_node) {
+		item->waker_bfqq = NULL;
+		bfq_clear_bfqq_has_waker(item);
+		hlist_del_init(&item->woken_list_node);
+	}
+
 	bfq_put_queue(bfqq); /* release process reference */
 }
 
@@ -6078,7 +6051,7 @@ static void bfq_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 	BFQ_BUG_ON(!bfqq && !(at_head || blk_rq_is_passthrough(rq)));
 	BFQ_BUG_ON(bfqq && bic_to_bfqq(RQ_BIC(rq), rq_is_sync(rq)) != bfqq);
 
-	if (!bfqq || at_head || blk_rq_is_passthrough(rq)) {
+	if (at_head || blk_rq_is_passthrough(rq)) {
 		if (at_head)
 			list_add(&rq->queuelist, &bfqd->dispatch);
 		else
@@ -6093,7 +6066,7 @@ static void bfq_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 			bfq_log(bfqd,
 				"%p in disp: at_head %d",
 				rq, at_head);
-	} else {
+	} else { /* bfqq is assumed to be non null here */
 		BFQ_BUG_ON(!bfqq);
 		BFQ_BUG_ON(!(rq->rq_flags & RQF_GOT));
 		rq->rq_flags &= ~RQF_GOT;
-- 
2.23.0.rc1

