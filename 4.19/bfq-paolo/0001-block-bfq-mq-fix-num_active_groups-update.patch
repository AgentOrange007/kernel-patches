From 0fb2e2371554a373b7fcaca1ee5d29813f86399d Mon Sep 17 00:00:00 2001
From: Paolo Valente <paolo.valente@linaro.org>
Date: Sat, 1 Dec 2018 13:01:24 +0100
Subject: [PATCH] block, bfq-mq: fix num_active_groups update

Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
---
 block/bfq-mq-iosched.c | 23 +++++++++++++++++++++--
 block/bfq-mq.h         |  3 +++
 block/bfq-sched.c      |  5 ++++-
 block/bfq.h            |  3 +++
 4 files changed, 31 insertions(+), 3 deletions(-)

diff --git a/block/bfq-mq-iosched.c b/block/bfq-mq-iosched.c
index b904c9b0c654..eb6d9f4e587e 100644
--- a/block/bfq-mq-iosched.c
+++ b/block/bfq-mq-iosched.c
@@ -790,6 +790,7 @@ static void bfq_weights_tree_remove(struct bfq_data *bfqd,
 						     */
 
 		if (sd->next_in_service || sd->in_service_entity) {
+			BUG_ON(!entity->in_num_active_groups);
 			/*
 			 * entity is still active, because either
 			 * next_in_service or in_service_entity is not
@@ -803,8 +804,26 @@ static void bfq_weights_tree_remove(struct bfq_data *bfqd,
 			 */
 			break;
 		}
-		BUG_ON(!bfqd->num_active_groups);
-		bfqd->num_active_groups--;
+		BUG_ON(!bfqd->num_active_groups && entity->in_num_active_groups));
+		/*
+		 * Decrement of num_active_groups is not performed
+		 * immediately upon deactivation of entity (group),
+		 * but it is delayed to when it also happens that at
+		 * least a leaf descendant bfqq of entity has all its
+		 * pending requests completed. This delayed decrement
+		 * is implemented by invoking this function only when
+		 * the latter bfqq event happens. But this also means
+		 * that an inactive entity may be reached multiple
+		 * times by the next lines of code, if multiple
+		 * descendant bfqqs happen to have all their pending
+		 * requests completed. For this reason we use the flag
+		 * in_num_active_groups to know whether entity is
+		 * actually still counted in num_active_groups
+		 */
+		if (entity->in_num_active_groups) {
+			bfqd->num_active_groups--;
+			entity->in_num_active_groups = false;
+		}
 		bfq_log_bfqq(bfqd, bfqq, "num_active_groups %u",
 			     bfqd->num_active_groups);
 	}
diff --git a/block/bfq-mq.h b/block/bfq-mq.h
index 511f251ac5aa..f6754da2f9ef 100644
--- a/block/bfq-mq.h
+++ b/block/bfq-mq.h
@@ -194,6 +194,9 @@ struct bfq_entity {
 
 	/* flag, set to request a weight, ioprio or ioprio_class change  */
 	int prio_changed;
+
+	/* flag, set iff the entity is counted in num_active_groups */
+	bool in_num_active_groups;
 };
 
 struct bfq_group;
diff --git a/block/bfq-sched.c b/block/bfq-sched.c
index 285ae9cbc5bb..ab6ab41b6754 100644
--- a/block/bfq-sched.c
+++ b/block/bfq-sched.c
@@ -1195,7 +1195,10 @@ static void __bfq_activate_entity(struct bfq_entity *entity,
 		struct bfq_data *bfqd = bfqg->bfqd;
 
 		BUG_ON(!bfqd);
-		bfqd->num_active_groups++;
+		if (!entity->in_num_active_groups) {
+			entity->in_num_active_groups = true;
+			bfqd->num_active_groups++;
+		}
 		bfq_log_bfqg(bfqd, bfqg, "num_active_groups %u",
 			     bfqd->num_active_groups);
 	}
diff --git a/block/bfq.h b/block/bfq.h
index 623aabfe67b1..bb1c7ea11c8e 100644
--- a/block/bfq.h
+++ b/block/bfq.h
@@ -201,6 +201,9 @@ struct bfq_entity {
 
 	/* flag, set to request a weight, ioprio or ioprio_class change  */
 	int prio_changed;
+
+	/* flag, set iff the entity is counted in num_active_groups */
+	bool in_num_active_groups
 };
 
 struct bfq_group;
-- 
2.16.1

