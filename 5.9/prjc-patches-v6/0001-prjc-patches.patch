From 6a82ab56adef0ea191e5a15521d4d0374dbe991b Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Fri, 4 Dec 2020 10:55:21 +0800
Subject: [PATCH 1/3] sched/alt: Minor improvement for
 sched_cpu_affinity_masks.

---
 kernel/sched/alt_core.c | 29 +++++++++++++----------------
 1 file changed, 13 insertions(+), 16 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index e485c76b1668..58a432fffd53 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -800,7 +800,7 @@ int get_nohz_timer_target(void)
 		default_cpu = cpu;
 	}
 
-	for (mask = &(per_cpu(sched_cpu_affinity_masks, cpu)[0]);
+	for (mask = per_cpu(sched_cpu_affinity_masks, cpu) + 1;
 	     mask < per_cpu(sched_cpu_affinity_end_mask, cpu); mask++)
 		for_each_cpu_and(i, mask, housekeeping_cpumask(HK_FLAG_TIMER))
 			if (!idle_cpu(i))
@@ -3524,7 +3524,7 @@ static inline int take_other_rq_tasks(struct rq *rq, int cpu)
 	if (cpumask_empty(&sched_rq_pending_mask))
 		return 0;
 
-	affinity_mask = &(per_cpu(sched_cpu_affinity_masks, cpu)[0]);
+	affinity_mask = per_cpu(sched_cpu_affinity_masks, cpu) + 1;
 	end_mask = per_cpu(sched_cpu_affinity_end_mask, cpu);
 	do {
 		int i;
@@ -5863,19 +5863,18 @@ int sched_cpu_dying(unsigned int cpu)
 #ifdef CONFIG_SMP
 static void sched_init_topology_cpumask_early(void)
 {
-	int cpu, level;
+	int cpu;
 	cpumask_t *tmp;
 
 	for_each_possible_cpu(cpu) {
-		for (level = 0; level < NR_CPU_AFFINITY_LEVELS; level++) {
-			tmp = &(per_cpu(sched_cpu_affinity_masks, cpu)[level]);
-			cpumask_copy(tmp, cpu_possible_mask);
-			cpumask_clear_cpu(cpu, tmp);
-		}
-		per_cpu(sched_cpu_llc_mask, cpu) =
-			&(per_cpu(sched_cpu_affinity_masks, cpu)[0]);
-		per_cpu(sched_cpu_affinity_end_mask, cpu) =
-			&(per_cpu(sched_cpu_affinity_masks, cpu)[1]);
+		tmp = per_cpu(sched_cpu_affinity_masks, cpu);
+
+		cpumask_copy(tmp, cpumask_of(cpu));
+		tmp++;
+		cpumask_copy(tmp, cpu_possible_mask);
+		cpumask_clear_cpu(cpu, tmp);
+		per_cpu(sched_cpu_llc_mask, cpu) = tmp;
+		per_cpu(sched_cpu_affinity_end_mask, cpu) = ++tmp;
 		/*per_cpu(sd_llc_id, cpu) = cpu;*/
 	}
 }
@@ -5896,9 +5895,7 @@ static void sched_init_topology_cpumask(void)
 		/* take chance to reset time slice for idle tasks */
 		cpu_rq(cpu)->idle->time_slice = sched_timeslice_ns;
 
-		chk = &(per_cpu(sched_cpu_affinity_masks, cpu)[0]);
-
-		cpumask_copy(chk++, cpumask_of(cpu));
+		chk = per_cpu(sched_cpu_affinity_masks, cpu) + 1;
 
 		cpumask_complement(chk, cpumask_of(cpu));
 #ifdef CONFIG_SCHED_SMT
@@ -5916,7 +5913,7 @@ static void sched_init_topology_cpumask(void)
 		printk(KERN_INFO "sched: cpu#%02d llc_id = %d, llc_mask idx = %d\n",
 		       cpu, per_cpu(sd_llc_id, cpu),
 		       (int) (per_cpu(sched_cpu_llc_mask, cpu) -
-			      &(per_cpu(sched_cpu_affinity_masks, cpu)[0])));
+			      per_cpu(sched_cpu_affinity_masks, cpu)));
 	}
 }
 #endif
-- 
2.29.2.435.g72ffeb997e


From f80237ceabb37232055a848dd89dc941a75f29fc Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Sun, 6 Dec 2020 19:26:20 +0800
Subject: [PATCH 2/3] sched/pds: Fix for low priority NORMAL policy task.

Task priodl is not properly set, which cause low priority task freezed.
---
 init/init_task.c        | 7 ++++++-
 kernel/sched/alt_core.c | 8 --------
 kernel/sched/bmq_imp.h  | 8 ++++++++
 kernel/sched/pds_imp.h  | 8 ++++++++
 4 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/init/init_task.c b/init/init_task.c
index 5a23122f3d2c..663fb03d7dac 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -75,10 +75,15 @@ struct task_struct init_task
 	.stack		= init_stack,
 	.usage		= REFCOUNT_INIT(2),
 	.flags		= PF_KTHREAD,
-#ifdef CONFIG_SCHED_ALT
+#ifdef CONFIG_SCHED_BMQ
 	.prio		= DEFAULT_PRIO + MAX_PRIORITY_ADJ,
 	.static_prio	= DEFAULT_PRIO,
 	.normal_prio	= DEFAULT_PRIO + MAX_PRIORITY_ADJ,
+#endif
+#ifdef CONFIG_SCHED_PDS
+	.prio		= MAX_USER_RT_PRIO,
+	.static_prio	= DEFAULT_PRIO,
+	.normal_prio	= MAX_USER_RT_PRIO,
 #else
 	.prio		= MAX_PRIO - 20,
 	.static_prio	= MAX_PRIO - 20,
diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 58a432fffd53..3808507c44c1 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -1035,14 +1035,6 @@ static inline void hrtick_rq_init(struct rq *rq)
 }
 #endif	/* CONFIG_SCHED_HRTICK */
 
-static inline int normal_prio(struct task_struct *p)
-{
-	if (task_has_rt_policy(p))
-		return MAX_RT_PRIO - 1 - p->rt_priority;
-
-	return p->static_prio + MAX_PRIORITY_ADJ;
-}
-
 /*
  * Calculate the current priority, i.e. the priority
  * taken into account by the scheduler. This value might
diff --git a/kernel/sched/bmq_imp.h b/kernel/sched/bmq_imp.h
index ad9a7c448da7..e213e82475ab 100644
--- a/kernel/sched/bmq_imp.h
+++ b/kernel/sched/bmq_imp.h
@@ -36,6 +36,14 @@ static inline void deboost_task(struct task_struct *p)
 /*
  * Common interfaces
  */
+static inline int normal_prio(struct task_struct *p)
+{
+	if (task_has_rt_policy(p))
+		return MAX_RT_PRIO - 1 - p->rt_priority;
+
+	return p->static_prio + MAX_PRIORITY_ADJ;
+}
+
 static inline int task_sched_prio(struct task_struct *p, struct rq *rq)
 {
 	return (p->prio < MAX_RT_PRIO)? p->prio : MAX_RT_PRIO / 2 + (p->prio + p->boost_prio) / 2;
diff --git a/kernel/sched/pds_imp.h b/kernel/sched/pds_imp.h
index bd3b84cbafa7..2527c48323af 100644
--- a/kernel/sched/pds_imp.h
+++ b/kernel/sched/pds_imp.h
@@ -26,6 +26,14 @@ static const unsigned char dl_level_map[] = {
 	 1,  0
 };
 
+static inline int normal_prio(struct task_struct *p)
+{
+	if (task_has_rt_policy(p))
+		return MAX_RT_PRIO - 1 - p->rt_priority;
+
+	return MAX_USER_RT_PRIO;
+}
+
 static inline int
 task_sched_prio(const struct task_struct *p, const struct rq *rq)
 {
-- 
2.29.2.435.g72ffeb997e


From 03bf94afb6c40ab0c66bfd942fa56aac9203de92 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Mon, 7 Dec 2020 10:19:13 +0800
Subject: [PATCH 3/3] Project-C v5.9-r3

---
 kernel/sched/alt_core.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 3808507c44c1..a9c82fffef59 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -52,7 +52,7 @@
  */
 EXPORT_TRACEPOINT_SYMBOL_GPL(pelt_irq_tp);
 
-#define ALT_SCHED_VERSION "v5.9-r2"
+#define ALT_SCHED_VERSION "v5.9-r3"
 
 /* rt_prio(prio) defined in include/linux/sched/rt.h */
 #define rt_task(p)		rt_prio((p)->prio)
-- 
2.29.2.435.g72ffeb997e

