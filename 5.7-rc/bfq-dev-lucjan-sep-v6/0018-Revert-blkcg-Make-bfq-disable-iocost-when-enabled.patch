From 7372de33cca155a478772bbb2a957838017ccdad Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 30 Apr 2020 17:31:20 +0200
Subject: [PATCH 18/24] Revert "blkcg: Make bfq disable iocost when enabled"

This reverts commit 284576a350f89da6fcdc219ad733474c112f2d06.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 Documentation/admin-guide/cgroup-v2.rst |  8 +++----
 block/bfq-cgroup.c                      |  2 --
 block/bfq-iosched.c                     | 32 -------------------------
 block/blk-iocost.c                      |  5 ++--
 include/linux/blk-cgroup.h              |  5 ----
 kernel/cgroup/cgroup.c                  |  2 --
 6 files changed, 6 insertions(+), 48 deletions(-)

diff --git a/Documentation/admin-guide/cgroup-v2.rst b/Documentation/admin-guide/cgroup-v2.rst
index 710e700..bcc8026 100644
--- a/Documentation/admin-guide/cgroup-v2.rst
+++ b/Documentation/admin-guide/cgroup-v2.rst
@@ -1453,11 +1453,9 @@ IO
 
 The "io" controller regulates the distribution of IO resources.  This
 controller implements both weight based and absolute bandwidth or IOPS
-limit distribution.  Weight based distribution is implemented by
-either iocost controller or bfq IO scheduler.  When bfq is selected as
-the IO scheduler for any block device, iocost is disabled and bfq's
-implementation overrides for all devices.  If bfq is built as a kernel
-module, unloading it re-enables iocost.
+limit distribution; however, weight based distribution is available
+only if cfq-iosched is in use and neither scheme is available for
+blk-mq devices.
 
 
 IO Interface Files
diff --git a/block/bfq-cgroup.c b/block/bfq-cgroup.c
index 287b716..0112735 100644
--- a/block/bfq-cgroup.c
+++ b/block/bfq-cgroup.c
@@ -1296,9 +1296,7 @@ struct bfq_group *bfq_create_group_hierarchy(struct bfq_data *bfqd, int node)
 }
 
 struct blkcg_policy blkcg_policy_bfq = {
-#ifndef CONFIG_BLK_CGROUP_IOCOST
 	.dfl_cftypes		= bfq_blkg_files,
-#endif
 	.legacy_cftypes		= bfq_blkcg_legacy_files,
 
 	.cpd_alloc_fn		= bfq_cpd_alloc,
diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index ffff5a1..bdfe23d 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -7218,36 +7218,6 @@ static void bfq_init_root_group(struct bfq_group *root_group,
 	root_group->sched_data.bfq_class_idle_last_service = jiffies;
 }
 
-#if defined(CONFIG_BFQ_GROUP_IOSCHED) && defined(CONFIG_BLK_CGROUP_IOCOST)
-static bool bfq_enabled = false;
-
-static void bfq_enable(void)
-{
-	static DEFINE_MUTEX(bfq_enable_mutex);
-
-	mutex_lock(&bfq_enable_mutex);
-	if (!bfq_enabled) {
-		pr_info("bfq-iosched: Overriding iocost\n");
-		blkcg_policy_unregister(&blkcg_policy_iocost);
-		cgroup_add_dfl_cftypes(&io_cgrp_subsys, bfq_blkg_files);
-		bfq_enabled = true;
-	}
-	mutex_unlock(&bfq_enable_mutex);
-}
-
-static void __exit bfq_disable(void)
-{
-	if (bfq_enabled) {
-		pr_info("bfq-iosched: Restoring iocost\n");
-		cgroup_rm_cftypes(bfq_blkg_files);
-		blkcg_policy_register(&blkcg_policy_iocost);
-	}
-}
-#else
-static void bfq_enable(void) {}
-static void __exit bfq_disable(void) {}
-#endif
-
 static int bfq_init_queue(struct request_queue *q, struct elevator_type *e)
 {
 	struct bfq_data *bfqd;
@@ -7373,7 +7343,6 @@ static int bfq_init_queue(struct request_queue *q, struct elevator_type *e)
 	bfq_init_entity(&bfqd->oom_bfqq.entity, bfqd->root_group);
 
 	wbt_disable_default(q);
-	bfq_enable();
 	return 0;
 
 out_free:
@@ -7779,7 +7748,6 @@ static void __exit bfq_exit(void)
 	blkcg_policy_unregister(&blkcg_policy_bfq);
 #endif
 	bfq_slab_kill();
-	bfq_disable();
 }
 
 module_init(bfq_init);
diff --git a/block/blk-iocost.c b/block/blk-iocost.c
index 1e8c2de..7c1fe60 100644
--- a/block/blk-iocost.c
+++ b/block/blk-iocost.c
@@ -602,6 +602,8 @@ static u32 vrate_adj_pct[] =
 	  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 	  4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16 };
 
+static struct blkcg_policy blkcg_policy_iocost;
+
 /* accessors and helpers */
 static struct ioc *rqos_to_ioc(struct rq_qos *rqos)
 {
@@ -2469,7 +2471,7 @@ static struct cftype ioc_files[] = {
 	{}
 };
 
-struct blkcg_policy blkcg_policy_iocost = {
+static struct blkcg_policy blkcg_policy_iocost = {
 	.dfl_cftypes	= ioc_files,
 	.cpd_alloc_fn	= ioc_cpd_alloc,
 	.cpd_free_fn	= ioc_cpd_free,
@@ -2477,7 +2479,6 @@ struct blkcg_policy blkcg_policy_iocost = {
 	.pd_init_fn	= ioc_pd_init,
 	.pd_free_fn	= ioc_pd_free,
 };
-EXPORT_SYMBOL_GPL(blkcg_policy_iocost);
 
 static int __init ioc_init(void)
 {
diff --git a/include/linux/blk-cgroup.h b/include/linux/blk-cgroup.h
index 9158acd..35f8ffe 100644
--- a/include/linux/blk-cgroup.h
+++ b/include/linux/blk-cgroup.h
@@ -680,11 +680,6 @@ static inline void blkcg_clear_delay(struct blkcg_gq *blkg)
 void blkcg_add_delay(struct blkcg_gq *blkg, u64 now, u64 delta);
 void blkcg_schedule_throttle(struct request_queue *q, bool use_memdelay);
 void blkcg_maybe_throttle_current(void);
-
-#ifdef CONFIG_BLK_CGROUP_IOCOST
-extern struct blkcg_policy blkcg_policy_iocost;
-#endif
-
 #else	/* CONFIG_BLK_CGROUP */
 
 struct blkcg {
diff --git a/kernel/cgroup/cgroup.c b/kernel/cgroup/cgroup.c
index 726fe74..06b5ea9 100644
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@ -4009,7 +4009,6 @@ int cgroup_rm_cftypes(struct cftype *cfts)
 	mutex_unlock(&cgroup_mutex);
 	return ret;
 }
-EXPORT_SYMBOL_GPL(cgroup_rm_cftypes);
 
 /**
  * cgroup_add_cftypes - add an array of cftypes to a subsystem
@@ -4066,7 +4065,6 @@ int cgroup_add_dfl_cftypes(struct cgroup_subsys *ss, struct cftype *cfts)
 		cft->flags |= __CFTYPE_ONLY_ON_DFL;
 	return cgroup_add_cftypes(ss, cfts);
 }
-EXPORT_SYMBOL_GPL(cgroup_add_dfl_cftypes);
 
 /**
  * cgroup_add_legacy_cftypes - add an array of cftypes for legacy hierarchies
-- 
2.26.2.533.gb34789c0b0

