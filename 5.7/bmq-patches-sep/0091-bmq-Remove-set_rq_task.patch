From aa5575bf9b3836850b0e1a06ac6f5ae427a84d6b Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Sun, 22 Mar 2020 08:46:21 +0800
Subject: [PATCH 091/106] bmq: Remove set_rq_task().

---
 kernel/sched/bmq.c | 26 +++++++++-----------------
 1 file changed, 9 insertions(+), 17 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index b37608bbc23a..3b9f9b109c9d 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -3311,21 +3311,6 @@ choose_next_task(struct rq *rq, int cpu, struct task_struct *prev)
 	return next;
 }
 
-static inline void set_rq_task(struct rq *rq, struct task_struct *p)
-{
-	p->last_ran = rq->clock_task;
-
-	if (unlikely(sched_timeslice_ns == p->time_slice))
-		rq->last_ts_switch = rq->clock;
-
-	if (p == rq->idle)
-		schedstat_inc(rq->sched_goidle);
-#ifdef CONFIG_HIGH_RES_TIMERS
-	else
-		hrtick_start(rq, p->time_slice);
-#endif
-}
-
 /*
  * schedule() is the main scheduler function.
  *
@@ -3421,9 +3406,17 @@ static void __sched notrace __schedule(bool preempt)
 
 	next = choose_next_task(rq, cpu, prev);
 
-	set_rq_task(rq, next);
+	if (next == rq->idle)
+		schedstat_inc(rq->sched_goidle);
+#ifdef CONFIG_HIGH_RES_TIMERS
+	else
+		hrtick_start(rq, next->time_slice);
+#endif
 
 	if (prev != next) {
+		next->last_ran = rq->clock_task;
+		rq->last_ts_switch = rq->clock;
+
 		rq->nr_switches++;
 		/*
 		 * RCU users of rcu_dereference(rq->curr) may not see
@@ -3445,7 +3438,6 @@ static void __sched notrace __schedule(bool preempt)
 		 *   is a RELEASE barrier),
 		 */
 		++*switch_count;
-		rq->last_ts_switch = rq->clock;
 
 		trace_sched_switch(preempt, prev, next);
 
-- 
2.27.0.rc2

