From 2c1b260bb47b7b874e2074398c3bce84ec44ee31 Mon Sep 17 00:00:00 2001
From: "Jan Alexander Steffens (heftig)" <heftig@archlinux.org>
Date: Fri, 10 Jul 2020 16:41:43 +0200
Subject: [PATCH 19/20] drivers: Revert i2c patches

i2c_designware i2c_designware.0: controller timed out
i2c_designware i2c_designware.0: timeout in disabling adapter
i2c_designware i2c_designware.0: timeout waiting for bus ready
i2c_designware i2c_designware.0: timeout waiting for bus ready
i2c_designware i2c_designware.0: timeout waiting for bus ready

And the last message repeating multiple times per second, ad infinitum.
---
 drivers/hid/i2c-hid/i2c-hid-core.c         |  5 +----
 drivers/i2c/busses/i2c-designware-master.c | 10 ++++------
 2 files changed, 5 insertions(+), 10 deletions(-)

diff --git a/drivers/hid/i2c-hid/i2c-hid-core.c b/drivers/hid/i2c-hid/i2c-hid-core.c
index 739dccfc5..294c84e13 100644
--- a/drivers/hid/i2c-hid/i2c-hid-core.c
+++ b/drivers/hid/i2c-hid/i2c-hid-core.c
@@ -472,14 +472,11 @@ static void i2c_hid_get_input(struct i2c_hid *ihid)
 	int ret;
 	u32 ret_size;
 	int size = le16_to_cpu(ihid->hdesc.wMaxInputLength);
-	u16 flags;
 
 	if (size > ihid->bufsize)
 		size = ihid->bufsize;
 
-	/* Try to do a block read if the size fits in one byte */
-	flags = size > 255 ? I2C_M_RD : I2C_M_RD | I2C_M_RECV_LEN;
-	ret = i2c_transfer_buffer_flags(ihid->client, ihid->inbuf, size, flags);
+	ret = i2c_master_recv(ihid->client, ihid->inbuf, size);
 	if (ret != size) {
 		if (ret < 0)
 			return;
diff --git a/drivers/i2c/busses/i2c-designware-master.c b/drivers/i2c/busses/i2c-designware-master.c
index 00abc02c7..3a58eef20 100644
--- a/drivers/i2c/busses/i2c-designware-master.c
+++ b/drivers/i2c/busses/i2c-designware-master.c
@@ -394,12 +394,10 @@ i2c_dw_read(struct dw_i2c_dev *dev)
 			u32 flags = msgs[dev->msg_read_idx].flags;
 
 			*buf = dw_readl(dev, DW_IC_DATA_CMD);
-			if (flags & I2C_M_RECV_LEN) {
-				/* Ensure length byte is a valid value */
-				if (*buf > 0)
-					len = i2c_dw_recv_len(dev, *buf);
-				else
-					len = i2c_dw_recv_len(dev, len);
+			/* Ensure length byte is a valid value */
+			if (flags & I2C_M_RECV_LEN &&
+				*buf <= I2C_SMBUS_BLOCK_MAX && *buf > 0) {
+				len = i2c_dw_recv_len(dev, *buf);
 			}
 			buf++;
 			dev->rx_outstanding--;
-- 
2.28.0.rc0

