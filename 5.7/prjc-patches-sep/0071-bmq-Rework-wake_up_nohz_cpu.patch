From 90cd929128972ff340acadf85ee6a004d479890c Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Thu, 13 Feb 2020 21:56:05 +0800
Subject: [PATCH 071/112] bmq: Rework wake_up_nohz_cpu().

---
 kernel/sched/bmq.c | 24 ++++++++++++++++++++++--
 1 file changed, 22 insertions(+), 2 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index d5ce39d5143f..0d2567963cf0 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -823,7 +823,7 @@ int get_nohz_timer_target(void)
  * account when the CPU goes back to idle and evaluates the timer
  * wheel for the next timer event.
  */
-void wake_up_idle_cpu(int cpu)
+static inline void wake_up_idle_cpu(int cpu)
 {
 	if (cpu == smp_processor_id())
 		return;
@@ -832,10 +832,30 @@ void wake_up_idle_cpu(int cpu)
 	smp_send_reschedule(cpu);
 }
 
+static inline bool wake_up_full_nohz_cpu(int cpu)
+{
+	/*
+	 * We just need the target to call irq_exit() and re-evaluate
+	 * the next tick. The nohz full kick at least implies that.
+	 * If needed we can still optimize that later with an
+	 * empty IRQ.
+	 */
+	if (tick_nohz_full_cpu(cpu)) {
+		if (cpu != smp_processor_id() ||
+		    tick_nohz_tick_stopped())
+			tick_nohz_full_kick_cpu(cpu);
+		return true;
+	}
+
+	return false;
+}
+
 void wake_up_nohz_cpu(int cpu)
 {
-	wake_up_idle_cpu(cpu);
+	if (cpu_online(cpu) && !wake_up_full_nohz_cpu(cpu))
+		wake_up_idle_cpu(cpu);
 }
+
 #endif /* CONFIG_NO_HZ_COMMON */
 #endif /* CONFIG_SMP */
 
-- 
2.27.0.112.g101b3204f3

