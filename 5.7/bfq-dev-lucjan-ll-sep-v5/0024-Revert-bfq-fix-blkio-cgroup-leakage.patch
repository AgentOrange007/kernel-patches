From ff62de1d6b7aaaaae8b21f2dc299378121ed7824 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 23 Jul 2020 19:54:35 +0200
Subject: [PATCH 24/26] Revert "bfq: fix blkio cgroup leakage"

This reverts commit 43fec6dd35b6c89215aa2b36f0aa4216f6ce2dd2.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-cgroup.c  |  2 +-
 block/bfq-iosched.h |  1 +
 block/bfq-wf2q.c    | 17 +++++++++++------
 3 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/block/bfq-cgroup.c b/block/bfq-cgroup.c
index 6efa0f97e..6959a542c 100644
--- a/block/bfq-cgroup.c
+++ b/block/bfq-cgroup.c
@@ -335,7 +335,7 @@ static void bfqg_put(struct bfq_group *bfqg)
 	}
 }
 
-static void bfqg_and_blkg_get(struct bfq_group *bfqg)
+void bfqg_and_blkg_get(struct bfq_group *bfqg)
 {
 	/* see comments in bfq_bic_update_cgroup for why refcounting bfqg */
 	bfqg_get(bfqg);
diff --git a/block/bfq-iosched.h b/block/bfq-iosched.h
index 2440ab3e3..fbe131560 100644
--- a/block/bfq-iosched.h
+++ b/block/bfq-iosched.h
@@ -990,6 +990,7 @@ struct bfq_group *bfq_find_set_group(struct bfq_data *bfqd,
 struct blkcg_gq *bfqg_to_blkg(struct bfq_group *bfqg);
 struct bfq_group *bfqq_group(struct bfq_queue *bfqq);
 struct bfq_group *bfq_create_group_hierarchy(struct bfq_data *bfqd, int node);
+void bfqg_and_blkg_get(struct bfq_group *bfqg);
 void bfqg_and_blkg_put(struct bfq_group *bfqg);
 
 #ifdef CONFIG_BFQ_GROUP_IOSCHED
diff --git a/block/bfq-wf2q.c b/block/bfq-wf2q.c
index e5a2c5ff9..9853a0a23 100644
--- a/block/bfq-wf2q.c
+++ b/block/bfq-wf2q.c
@@ -615,14 +615,13 @@ static void bfq_get_entity(struct bfq_entity *entity)
 {
 	struct bfq_queue *bfqq = bfq_entity_to_bfqq(entity);
 
-	/* Grab reference only for bfq_queue's objects, bfq_group ones
-	 * are owned by blkcg_gq
-	 */
 	if (bfqq) {
 		bfqq->ref++;
 		bfq_log_bfqq(bfqq->bfqd, bfqq, "%p %d",
 			     bfqq, bfqq->ref);
-	}
+	} else
+		bfqg_and_blkg_get(container_of(entity, struct bfq_group,
+					       entity));
 }
 
 /**
@@ -742,11 +741,17 @@ static void bfq_forget_entity(struct bfq_service_tree *st,
 
 	entity->on_st_or_in_serv = false;
 	st->wsum -= entity->weight;
-	if (bfqq && !is_in_service) {
+
+	if (is_in_service)
+		return;
+
+	if (bfqq) {
 		bfq_log_bfqq(bfqq->bfqd, bfqq, "(before): %p %d",
 			     bfqq, bfqq->ref);
 		bfq_put_queue(bfqq);
-       }
+	} else
+		bfqg_and_blkg_put(container_of(entity, struct bfq_group,
+					       entity));
 }
 
 /**
-- 
2.28.0.rc0

