From 1dbe55d253224d2d86d18836dfbddc8174347da8 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Fri, 6 Mar 2020 17:50:58 +0800
Subject: [PATCH 77/81] bmq: [Sync] 488603b815a7 sched/core: Don't skip remote
 tick for idle CPUs

---
 kernel/sched/bmq.c | 19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index 6a5ab93a30bb..8bb664cd09d9 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -2986,23 +2986,24 @@ static void sched_tick_remote(struct work_struct *work)
 	 * statistics and checks timeslices in a time-independent way, regardless
 	 * of when exactly it is running.
 	 */
-	if (idle_cpu(cpu) || !tick_nohz_tick_stopped_cpu(cpu))
+	if (!tick_nohz_tick_stopped_cpu(cpu))
 		goto out_requeue;
 
 	raw_spin_lock_irqsave(&rq->lock, flags);
 	curr = rq->curr;
 
-	if (is_idle_task(curr) || cpu_is_offline(cpu))
+	if (cpu_is_offline(cpu))
 		goto out_unlock;
 
 	update_rq_clock(rq);
-	delta = rq_clock_task(rq) - curr->last_ran;
-
-	/*
-	 * Make sure the next tick runs within a reasonable
-	 * amount of time.
-	 */
-	WARN_ON_ONCE(delta > (u64)NSEC_PER_SEC * 3);
+	if (!is_idle_task(curr)) {
+		/*
+		 * Make sure the next tick runs within a reasonable
+		 * amount of time.
+		 */
+		delta = rq_clock_task(rq) - curr->last_ran;
+		WARN_ON_ONCE(delta > (u64)NSEC_PER_SEC * 3);
+	}
 	scheduler_task_tick(rq);
 
 out_unlock:
-- 
2.26.0.51.ga7d14a4428

