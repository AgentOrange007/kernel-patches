From 18d403e00d91c4810562ede018dea0c31e734c63 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Tue, 19 Nov 2019 18:59:18 +0100
Subject: [PATCH 35/36] Revert "port: block, bfq: deschedule empty bfq_queues
 not referred by any process"

This reverts commit 6b139df2cd04cd982282f793c8856cf2dc5d35a4.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 32 ++++++--------------------------
 1 file changed, 6 insertions(+), 26 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index d8e7e8facce9..58948bd1a56c 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -3008,28 +3008,6 @@ static void bfq_bfqq_save_state(struct bfq_queue *bfqq)
 		     bfqq->wr_cur_max_time);
 }
 
-
-static
-void bfq_release_process_ref(struct bfq_data *bfqd, struct bfq_queue *bfqq)
-{
-	/*
-	 * To prevent bfqq's service guarantees from being violated,
-	 * bfqq may be left busy, i.e., queued for service, even if
-	 * empty (see comments in __bfq_bfqq_expire() for
-	 * details). But, if no process will send requests to bfqq any
-	 * longer, then there is no point in keeping bfqq queued for
-	 * service. In addition, keeping bfqq queued for service, but
-	 * with no process ref any longer, may have caused bfqq to be
-	 * freed when dequeued from service. But this is assumed to
-	 * never happen.
-	 */
-	if (bfq_bfqq_busy(bfqq) && RB_EMPTY_ROOT(&bfqq->sort_list) &&
-	    bfqq != bfqd->in_service_queue)
-		bfq_del_bfqq_busy(bfqd, bfqq, false);
-
-	bfq_put_queue(bfqq);
-}
-
 static void
 bfq_merge_bfqqs(struct bfq_data *bfqd, struct bfq_io_cq *bic,
 		struct bfq_queue *bfqq, struct bfq_queue *new_bfqq)
@@ -3112,7 +3090,8 @@ bfq_merge_bfqqs(struct bfq_data *bfqd, struct bfq_io_cq *bic,
 	 */
 	new_bfqq->pid = -1;
 	bfqq->bic = NULL;
-	bfq_release_process_ref(bfqd, bfqq);
+	/* release process reference to bfqq */
+	bfq_put_queue(bfqq);
 }
 
 static bool bfq_allow_bio_merge(struct request_queue *q, struct request *rq,
@@ -5505,7 +5484,7 @@ static void bfq_exit_bfqq(struct bfq_data *bfqd, struct bfq_queue *bfqq)
 
 	bfq_put_cooperator(bfqq);
 
-	bfq_release_process_ref(bfqd, bfqq);
+	bfq_put_queue(bfqq); /* release process reference */
 }
 
 static void bfq_exit_icq_bfqq(struct bfq_io_cq *bic, bool is_sync)
@@ -5609,7 +5588,8 @@ static void bfq_check_ioprio_change(struct bfq_io_cq *bic, struct bio *bio)
 
 	bfqq = bic_to_bfqq(bic, false);
 	if (bfqq) {
-		bfq_release_process_ref(bfqd, bfqq);
+		/* release process reference on this queue */
+		bfq_put_queue(bfqq);
 		bfqq = bfq_get_queue(bfqd, bio, BLK_RW_ASYNC, bic);
 		bic_set_bfqq(bic, bfqq, false);
 		bfq_log_bfqq(bfqd, bfqq,
@@ -6679,7 +6659,7 @@ bfq_split_bfqq(struct bfq_io_cq *bic, struct bfq_queue *bfqq)
 
 	bfq_put_cooperator(bfqq);
 
-	bfq_release_process_ref(bfqq->bfqd, bfqq);
+	bfq_put_queue(bfqq);
 	return NULL;
 }
 
-- 
2.24.0.155.gd9f6f3b619

