.
├── 4.11
│   ├── 0005-BFQ-update-to-v8r12.patch
│   ├── 0006-BFQ-bugfix-for-v8r12.patch
│   └── 4.11-bfq-mq-git-20170704.patch
├── 4.12
│   ├── 0100-Check-presence-on-tree-of-every-entity-after-every-a.patch
│   ├── 0200-BFQ-MQ-bugfix-from-pfkernel-1.patch
│   ├── 0200-BFQ-MQ-bugfix-from-pfkernel-2.patch
│   ├── 0200-BFQ-MQ-bugfix-from-pfkernel-3.patch
│   ├── 0200-BFQ-MQ-bugfix-from-pfkernel-4.patch
│   ├── 4.12-bfq-mq-git-20170810.patch
│   ├── 4.12-bfq-mq-git-20170829.patch
│   ├── 4.12-bfq-mq-git-20170831.patch
│   ├── 4.12-bfq-mq-git-20170904.patch
│   ├── blk-mq-from-pfkernel
│   │   ├── 0040-blk-mq-add-requests-in-the-tail-of-hctx->dispatch.patch
│   │   ├── 0040-blk-mq-align-to-legacy's-implementation-of-blk_execute_rq.patch
│   │   └── README for blk-mq-from-pfkernel.md
│   ├── blk-mq-v1
│   │   ├── 0050-blk-mq-sched-fix-scheduler-bad-performance.patch
│   │   ├── 0051-blk-mq-rename-flush_busy_ctx_data-as-ctx_iter_data.patch
│   │   ├── 0052-blk-mq-introduce-blk_mq_dispatch_rq_from_ctxs().patch
│   │   ├── 0053-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0054-blk-mq-sched-don't-dequeue-request-until-all-in->dispatch-are-flushed.patch
│   │   ├── 0055-blk-mq-sched-introduce-blk_mq_sched_queue_depth().patch
│   │   ├── 0056-blk-mq-sched-use-q->queue_depth-as-hint for q->nr_requests.patch
│   │   ├── 0057-blk-mq-introduce-BLK_MQ_F_SHARED_DEPTH.patch
│   │   ├── 0058-blk-mq-sched-cleanup-blk_mq_sched_dispatch_requests().patch
│   │   ├── 0059-blk-mq-sched-introduce-helpers-for-query-change-busy-state.patch
│   │   ├── 0060-blk-mq-introduce-helpers-for-operating->dispatch-list.patch
│   │   ├── 0061-blk-mq-introduce-pointers-to-dispatchlock-list.patch
│   │   ├── 0062-blk-mq-pass-request_queue-to-several-helpers-of-operating-BUSY.patch
│   │   └── 0063-blk-mq-sched-improve-IO-scheduling-on-SCSI-devcie.patch
│   ├── blk-mq-v2
│   │   ├── 0050-blk-mq-sched-fix-scheduler-bad-performance.patch
│   │   ├── 0051-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0052-blk-mq-introduce-blk_mq_dispatch_rq_from_ctx().patch
│   │   ├── 0053-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0054-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0055-blk-mq-sched-don't-dequeue-request-until-all-in-dispatch-are-flushed.patch
│   │   ├── 0056-blk-mq-sched-introduce-blk_mq_sched_queue_depth().patch
│   │   ├── 0057-blk-mq-sched-use-q->queue_depth-as-hint-for-q->nr_requests.patch
│   │   ├── 0058-blk-mq-introduce-BLK_MQ_F_SHARED_DEPTH.patch
│   │   ├── 0059-blk-mq-sched-introduce-helpers-for-query-change-busy-state.patch
│   │   ├── 0060-blk-mq-introduce-helpers-for-operating->dispatch-list.patch
│   │   ├── 0061-blk-mq-introduce-pointers-to-dispatch-lock&list.patch
│   │   ├── 0062-blk-mq-pass-request_queue-to-several-helpers-of-operating-BUSY.patch
│   │   ├── 0063-blk-mq-sched-improve-IO-scheduling-on-SCSI-devcie.patch
│   │   ├── 0064-blk-mq-block-introduce-rqhash-helpers.patch
│   │   ├── 0065-blk-mq-block-move-actual-bio-merge-code-into__elv_merge.patch
│   │   ├── 0066-blk-mq-block-add-check-on-elevator-for-supporting-bio-merge-via-hashtable-from-blk-mq-sw.patch
│   │   ├── 0067-blk-mq-block-introduce-last_merge-and-hash-to-blk_mq_ctx.patch
│   │   ├── 0068-blk-mq-sched-refactor-blk_mq_sched_try_merge().patch
│   │   └── 0069-blk-mq-improve-bio-merge-from-blk-mq-sw-queue.patch
│   ├── blk-mq-v3
│   │   ├── 0050-blk-mq-sched-fix-scheduler-bad-performance.patch
│   │   ├── 0051-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0052-blk-mq-introduce-blk_mq_dispatch_rq_from_ctx().patch
│   │   ├── 0053-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0054-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0055-blk-mq-sched-don't-dequeue-request-until-all-in->dispatch-are-flushed.patch
│   │   ├── 0056-blk-mq-sched-introduce-blk_mq_sched_queue_depth().patch
│   │   ├── 0057-blk-mq-sched-use-q->queue_depth-as-hint-for-q->nr_requests.patch
│   │   ├── 0058-blk-mq-block-introduce-rqhash-helpers.patch
│   │   ├── 0059-blk-mq-block-move-actual-bio-merge-code-into__elv_merge.patch
│   │   ├── 0060-blk-mq-block-add-check-on-elevator-for-supporting-bio-merge-via-hashtable-from-blk-mq-sw.patch
│   │   ├── 0061-blk-mq-block-introduce-last_merge-and-hash-to-blk_mq_ctx.patch
│   │   ├── 0062-blk-mq-sched-refactor-blk_mq_sched_try_merge().patch
│   │   └── 0063-blk-mq-improve-bio-merge-from-blk-mq-sw-queue.patch
│   └── blk-mq-v4
│       ├── 0050-blk-mq-sched-fix-scheduler-bad-performance.patch
│       ├── 0051-blk-mq-sbitmap-introduce-__sbitmap_for_each_set.patch
│       ├── 0052-blk-mq-introduce-blk_mq_dispatch_rq_from_ctx.patch
│       ├── 0053-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│       ├── 0054-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│       ├── 0055-blk-mq-sched-don-t-dequeue-request-until-all-in-disp.patch
│       ├── 0056-blk-mq-sched-introduce-blk_mq_sched_queue_depth.patch
│       ├── 0057-blk-mq-sched-use-q-queue_depth-as-hint-for-q-nr_requ.patch
│       ├── 0058-blk-mq-block-introduce-rqhash-helpers.patch
│       ├── 0059-blk-mq-block-move-actual-bio-merge-code-into-__elv_merge.patch
│       ├── 0060-blk-mq-block-add-check-on-elevator-for-supporting-bio-merge.patch
│       ├── 0061-blk-mq-block-introduce-.last_merge-and-.hash-to-blk_mq_ctx.patch
│       ├── 0062-blk-mq-sched-refactor-blk_mq_sched_try_merge.patch
│       └── 0063-blk-mq-improve-bio-merge-from-blk-mq-sw-queue.patch
├── 4.13
│   ├── 0001-bfq-sq-mq-fix-patching-error-with-20171109.patch
│   ├── 0100-Check-presence-on-tree-of-every-entity-after-every-a.patch
│   ├── 0200-BFQ-MQ-bugfix-from-pfkernel-2.patch
│   ├── 0200-BFQ-MQ-bugfix-from-pfkernel-3.patch
│   ├── 0200-BFQ-MQ-bugfix-from-pfkernel-4.patch
│   ├── 0300-Disable-writeback-throttling.patch
│   ├── 4.13-bfq-sq-mq-git-20170904.patch
│   ├── 4.13-bfq-sq-mq-git-20170912.patch
│   ├── 4.13-bfq-sq-mq-git-20170913.patch
│   ├── 4.13-bfq-sq-mq-git-20170919.patch
│   ├── 4.13-bfq-sq-mq-git-20170921.patch
│   ├── 4.13-bfq-sq-mq-git-20171007.patch
│   ├── 4.13-bfq-sq-mq-git-20171009.patch
│   ├── 4.13-bfq-sq-mq-git-20171030.patch
│   ├── 4.13-bfq-sq-mq-git-20171109.patch
│   ├── 4.13-bfq-sq-mq-git-20171111.patch
│   ├── 4.13-bfq-sq-mq-git-20171114.patch
│   ├── blk-mq-another
│   │   ├── 0090-blk-mq-put-the-driver-tag-of-nxt-rq-before-first-one-is-requeued.patch
│   │   ├── 0091-blk-flush-don't-run-queue-for-requests-of-bypassing-flush.patch
│   │   ├── 0092-block-pass-'run_queue'-to-blk_mq_request_bypass_insert.patch
│   │   ├── 0093-blk-flush-use-blk_mq_request_bypass_insert().patch
│   │   ├── 0094-blk-mq-sched-decide-how-to-handle-flush-rq-via-RQF_FLUSH_SEQ.patch
│   │   ├── 0095-blk-mq-move-blk_mq_put_driver_tag*()-into-blk-mq.h.patch
│   │   └── 0096-blk-mq-don't-allocate-driver-tag-beforehand-for-flush-rq.patch
│   ├── blk-mq-from-pfkernel
│   │   ├── 0040-blk-mq-add-requests-in-the-tail-of-hctx->dispatch.patch
│   │   ├── 0040-blk-mq-align-to-legacy's-implementation-of-blk_execute_rq.patch
│   │   └── README for blk-mq-from-pfkernel.md
│   ├── blk-mq-miscellaneous
│   │   ├── 0500-blk-mq-don't-handle-failure-in.get_budget.patch
│   │   ├── 0500-blk-mq-put-driver-tag-if-dispatch-budget-can't-be-got.patch
│   │   ├── 0500-blk-mq-quiesce-queue-during-switching-io-sched-and-updating-nr_requests.patch
│   │   ├── 0500-blk-mq-respect-queue-dead-via-blk_mq_quiesce_queue.patch
│   │   └── 0500-blk-mq-Revert-multiple-recent-patches.patch
│   ├── blk-mq-miscellaneous-v2
│   │   └── 0500-blk-mq-put-driver-tag-if-dispatch-budget-can't-be-got.patch
│   ├── blk-mq-v10
│   │   ├── 0050-blk-mq-sched-dispatch-from-scheduler-only-after-progress-is-made-on->dispatch.patch
│   │   ├── 0051-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0052-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0053-blk-mq-block-kyber-check-if-there-is-request-in-ctx-in-kyber_has_work().patch
│   │   ├── 0054-blk-mq-introduce-get_budget-and-put_budget-in-blk_mq_ops.patch
│   │   ├── 0055-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0056-blk-mq-SCSI-allow-to-pass-null-rq-to-scsi_prep_state_check().patch
│   │   └── 0057-blk-mq-SCSI-implement-get-budget-and-put_budget-for-blk-mq.patch
│   ├── blk-mq-v4
│   │   ├── 0050-blk-mq-sched-fix-scheduler-bad-performance.patch
│   │   ├── 0051-blk-mq-sbitmap-introduce-__sbitmap_for_each_set.patch
│   │   ├── 0052-blk-mq-introduce-blk_mq_dispatch_rq_from_ctx.patch
│   │   ├── 0053-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0054-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0055-blk-mq-sched-don-t-dequeue-request-until-all-in-disp.patch
│   │   ├── 0056-blk-mq-sched-introduce-blk_mq_sched_queue_depth.patch
│   │   ├── 0057-blk-mq-sched-use-q-queue_depth-as-hint-for-q-nr_requ.patch
│   │   ├── 0058-blk-mq-block-introduce-rqhash-helpers.patch
│   │   ├── 0059-blk-mq-block-move-actual-bio-merge-code-into-__elv_merge.patch
│   │   ├── 0060-blk-mq-block-add-check-on-elevator-for-supporting-bio-merge.patch
│   │   ├── 0061-blk-mq-block-introduce-.last_merge-and-.hash-to-blk_mq_ctx.patch
│   │   ├── 0062-blk-mq-sched-refactor-blk_mq_sched_try_merge.patch
│   │   └── 0063-blk-mq-improve-bio-merge-from-blk-mq-sw-queue.patch
│   ├── blk-mq-v5
│   │   ├── 0050-blk-mq-issue-rq-directly-in-blk_mq_request_bypass_insert().patch
│   │   ├── 0051-blk-mq-sched-fix-scheduler-bad-performance.patch
│   │   ├── 0052-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0053-blk-mq-introduc-blk_mq_dequeue_from_ctx().patch
│   │   ├── 0054-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0055-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0056-blk-mq-sched-don't-dequeue-request-until-all-in->dispatch-are-flushed.patch
│   │   ├── 0057-blk-mq-sched-introduce-blk_mq_sched_queue_depth().patch
│   │   ├── 0058-blk-mq-sched-use-q->queue_depth-as-hint-for-q->nr_requests.patch
│   │   ├── 0059-blk-mq-block-introduce-rqhash-helpers.patch
│   │   ├── 0060-blk-mq-block-move-actual-bio-merge-code-into__elv_merge.patch
│   │   ├── 0061-blk-mq-block-add-check-on-elevator-for-supporting-bio-merge-via-hashtable-from-blk-mq-sw-qu.patch
│   │   ├── 0062-blk-mq-block-introduce-last_merge-and-hash-to-blk_mq_ctx.patch
│   │   ├── 0063-blk-mq-sched-refactor-blk_mq_sched_try_merge().patch
│   │   └── 0064-blk-mq-improve-bio-merge-from-blk-mq-sw-queue.patch
│   ├── blk-mq-v6
│   │   ├── 0050-blk-mq-sched-fix-scheduler-bad-performance.patch
│   │   ├── 0051-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0052-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0053-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   └── 0054-blk-mq-sched-don't-dequeue-request-until-all-in->dispatch-are-flushed.patch
│   ├── blk-mq-v7
│   │   ├── 0050-blk-mq-sched-fix-scheduler-bad-performance.patch
│   │   ├── 0051-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0052-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0053-blk-mq_introduce_get_budget_and_put_budget_in_blk_mq_ops.patch
│   │   ├── 0054-blk-mq-sched_improve_dispatching_from_sw_queue.patch
│   │   └── 0055-blk-mq-SCSI-implement-get_budget-and-put_budget-for-blk-mq.patch
│   ├── blk-mq-v8
│   │   ├── 0050-blk-mq-sched-fix-scheduler-bad-performance.patch
│   │   ├── 0051-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0052-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0053-blk-mq-introduce-get_budget-and-put_budget-in-blk_mq_ops.patch
│   │   ├── 0054-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0055-blk-mq-SCSI-allow-to-pass-null-rq-to-scsi_prep_state_check().patch
│   │   └── 0056-blk-mq-SCSI-implement-get_budget-and-put_budget-for-blk-mq.patch
│   ├── blk-mq-v9
│   │   ├── 0050-blk-mq-sched-dispatch-from-scheduler-only-after-progress-is-made-on->dispatch.patch
│   │   ├── 0051-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0052-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0053-blk-mq-introduce-get_budget-and-put_budget-in-blk_mq_ops.patch
│   │   ├── 0054-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0055-blk-mq-SCSI-allow-to-pass-null-rq-to-scsi_prep_state_check().patch
│   │   └── 0056-blk-mq-SCSI-implement-get_budget-and-put_budget-for-blk-mq.patch
│   ├── block-blk
│   │   ├── 0080-block-blk-don't-handle-TAG_SHARED-in-restart.patch
│   │   └── 0081-block-blk-don't-restart-queue-when-get_budget-returns-BLK_STS_RESOURCE.patch
│   └── block-scsi
│       ├── 0070-block-scsi-run-idle-hctx-after-delay-in-scsi_mq_get_budget().patch
│       └── 0071-block-scsi-don't-handle-TAG_SHARED-in-restart.patch
├── 4.14
│   ├── 0009-bfq-sq-mq-fix-patching-error-with-20180109.patch
│   ├── 0100-Check-presence-on-tree-of-every-entity-after-every-a.patch
│   ├── 0300-Disable-writeback-throttling.patch
│   ├── 0699-block-bfq-fixes.patch
│   ├── 0799-block-bfq-fixes.patch
│   ├── 0800-block-bfq-fixes.patch
│   ├── 4.14-bfq-sq-mq-git-20171030.patch
│   ├── 4.14-bfq-sq-mq-git-20171109.patch
│   ├── 4.14-bfq-sq-mq-git-20171111.patch
│   ├── 4.14-bfq-sq-mq-git-20171114.patch
│   ├── 4.14-bfq-sq-mq-git-20171211.patch
│   ├── 4.14-bfq-sq-mq-git-20171219.patch
│   ├── 4.14-bfq-sq-mq-git-20171220.patch
│   ├── 4.14-bfq-sq-mq-git-20171222.patch
│   ├── 4.14-bfq-sq-mq-git-20171227.patch
│   ├── 4.14-bfq-sq-mq-git-20171228.patch
│   ├── 4.14-bfq-sq-mq-git-20180109.patch
│   ├── 4.14-bfq-sq-mq-git-20180110.patch
│   ├── 4.14-bfq-sq-mq-git-20180113.patch
│   ├── 4.14-bfq-sq-mq-git-20180113-v2.patch
│   ├── 4.14-bfq-sq-mq-git-20180130.patch
│   ├── 4.14-bfq-sq-mq-git-20180205.patch
│   ├── 4.14-bfq-sq-mq-git-20180207.patch
│   ├── 4.14-bfq-sq-mq-git-20180208.patch
│   ├── 4.14-bfq-sq-mq-git-20180227.patch
│   ├── 4.14-bfq-sq-mq-git-20180404.patch
│   ├── bfq-paolo
│   │   ├── 0001-paolo-bfq-update-max-IOPS-sustainable-with-BFQ.patch
│   │   ├── 0002-paolo-bfq-add-missing-invocations-of-bfqg_stats_update_io_add-remove.patch
│   │   ├── 0003-paolo-bfq-update-blkio-stats-outside-the-scheduler-lock.patch
│   │   └── 0004-paolo-bfq-move-debug-blkio-stats-behind-CONFIG_DEBUG_BLK_CGROUP.patch
│   ├── bfq-paolo-v10
│   │   └── 0800-block-bfq-add-requeue-request-hook.patch
│   ├── bfq-paolo-v2
│   │   └── 0001-paolo-block-bfq-remove-batches-of-confusing-ifdefs.patch
│   ├── bfq-paolo-v3
│   │   ├── 0880-block-bfq-add-missing-rq_pos_tree-update-on-rq-removal.patch
│   │   ├── 0880-block-bfq-check-low_latency-flag-in-bfq_bfqq_save_state().patch
│   │   ├── 0880-block-bfq-let-a-queue-be-merged-only-shortly-after-starting-IO.patch
│   │   └── 0880-block-bfq-remove-superfluous-check-in-queue-merging-setup.patch
│   ├── bfq-paolo-v4
│   │   └── 0890-block-bfq-increase-threshold-to-deem-IO-as-random.patch
│   ├── bfq-paolo-v5
│   │   └── 0891-block-bfq-limit-tags-for-writes-and-async-IO.patch
│   ├── bfq-paolo-v6
│   │   └── 0892-block-bfq-limit-sectors-served-with-interactive-weight-raising.patch
│   ├── bfq-paolo-v7
│   │   ├── 0001-block-bfq-put-async-queues-for-root-bfq-groups-too.patch
│   │   └── 0002-block-bfq-release-oom-queue-ref-to-root-group-on-exit.patch
│   ├── bfq-paolo-v8
│   │   ├── 0001-block-bfq-put-async-queues-for-root-bfq-groups-too.patch
│   │   └── 0002-block-bfq-release-oom-queue-ref-to-root-group-on-exit.patch
│   ├── bfq-paolo-v8-fix
│   │   └── 0003-block-bfq-compile-group-put-for-oom-queue-only-if-BFQ_GROUP_IOSCHED-is-set.patch
│   ├── bfq-paolo-v9
│   │   ├── 0929-block-bfq-limit-sectors-served-with-interactive-weight-raising.patch
│   │   └── 0929-block-bfq-limit-tags-for-writes-and-async-IO.patch
│   ├── blk-mq-another
│   │   ├── 0090-blk-mq-put-the-driver-tag-of-nxt-rq-before-first-one-is-requeued.patch
│   │   ├── 0091-blk-flush-don't-run-queue-for-requests-of-bypassing-flush.patch
│   │   ├── 0092-block-pass-'run_queue'-to-blk_mq_request_bypass_insert.patch
│   │   ├── 0093-blk-flush-use-blk_mq_request_bypass_insert().patch
│   │   ├── 0094-blk-mq-sched-decide-how-to-handle-flush-rq-via-RQF_FLUSH_SEQ.patch
│   │   ├── 0095-blk-mq-move-blk_mq_put_driver_tag*()-into-blk-mq.h.patch
│   │   └── 0096-blk-mq-don't-allocate-driver-tag-beforehand-for-flush-rq.patch
│   ├── blk-mq-miscellaneous
│   │   ├── 0500-blk-mq-don't-handle-failure-in.get_budget.patch
│   │   ├── 0500-blk-mq-put-driver-tag-if-dispatch-budget-can't-be-got.patch
│   │   ├── 0500-blk-mq-quiesce-queue-during-switching-io-sched-and-updating-nr_requests.patch
│   │   ├── 0500-blk-mq-respect-queue-dead-via-blk_mq_quiesce_queue.patch
│   │   └── 0500-blk-mq-Revert-multiple-recent-patches.patch
│   ├── blk-mq-miscellaneous-v10
│   │   └── 0222-blk-mq-don't-clear-RQF_MQ_INFLIGHT-in-blk_mq_rq_ctx_init().patch
│   ├── blk-mq-miscellaneous-v11
│   │   ├── 0333-blk-mq-move-actual-issue-into-one-helper.patch
│   │   ├── 0334-blk-mq-return-dispatch-result-to-caller-in-blk_mq_try_issue_directly.patch
│   │   └── 0335-blk-mq-issue-request-directly-for-blk_insert_cloned_request.patch
│   ├── blk-mq-miscellaneous-v12
│   │   ├── 0336-blk-mq-make-sure-hctx->next_cpu-is-set-correctly.patch
│   │   └── 0337-blk-mq-avoid-one-WARN_ON-in__blk_mq_run_hw_queue-to-printk.patch
│   ├── blk-mq-miscellaneous-v13
│   │   ├── 0444-blk-mq-introduce-BLK_STS_DEV_RESOURCE.patch
│   │   ├── 0445-dm-rq-handle-dispatch-exception-in-dm_dispatch_clone_request().patch
│   │   ├── 0446-dm-rq-return-BLK_STS_from map_request().patch
│   │   ├── 0447-blk-mq-introduce-blk_get_request_notify.patch
│   │   └── 0448-dm-mpath-use-blk_mq_alloc_request_notify-for-allocating-blk-mq req.patch
│   ├── blk-mq-miscellaneous-v14
│   │   ├── 0711-blk-mq-tags-define-several-fields-of-tags-as-pointer.patch
│   │   ├── 0712-blk-mq-introduce-BLK_MQ_F_GLOBAL_TAGS.patch
│   │   ├── 0713-blk-mq-scsi-add-template-flag-host_tagset.patch
│   │   ├── 0714-blk-mq-block-null_blk-introduce-module-parameter-of-g_global_tags.patch
│   │   ├── 0715-blk-mq-scsi-introduce-force_blk_mq.patch
│   │   ├── 0716-blk-mq-scsi-virtio_scsi-fix-IO-hang-by-irq-vector-automatic-affinity.patch
│   │   ├── 0717-blk-mq-scsi-hpsa-call-hpsa_hba_inquiry()-after-adding-host.patch
│   │   └── 0718-blk-mq-scsi-hpsa-use blk_mq-to-solve-irq-affinity-issue.patch
│   ├── blk-mq-miscellaneous-v2
│   │   └── 0500-blk-mq-put-driver-tag-if-dispatch-budget-can't-be-got.patch
│   ├── blk-mq-miscellaneous-v3
│   │   ├── 0600-blk-mq-issue-request-directly-for-blk_insert_cloned_request.patch
│   │   ├── 0600-blk-mq-move-actual-issue-into-one-helper.patch
│   │   ├── 0600-blk-mq-return-dispatch-result-to-caller-in-blk_mq_try_issue_directly.patch
│   │   ├── 0600-dm-mpath-don't-call-blk_mq_delay_run_hw_queue()-in-case-of-BLK_STS_RESOURCE.patch
│   │   └── 0600-dm-mpath-return-DM_MAPIO_REQUEUE-in-case-of-rq-allocation-failure.patch
│   ├── blk-mq-miscellaneous-v4
│   │   └── 0770-block-drai-queue-before-waiting-for-q_usage_counter-becoming-zero.patch
│   ├── blk-mq-miscellaneous-v5
│   │   ├── 0780-blk-mq-avoid-to-map-CPU-into-stale-hw-queue.patch
│   │   ├── 0780-blk-mq-fix-race-between-updating-nr_hw_queues-and-switching-io-sched.patch
│   │   ├── 0780-blk-mq-quiesce-queue-before-freeing-queue.patch
│   │   ├── 0780-blk-mq-quiesce-queue-during-switching-io-sched-and-updating-nr_requests.patch
│   │   ├── 0780-blk-mq-support-concurrent-blk_mq_quiesce_queue().patch
│   │   └── 0780-nvme-remove.init_request-callback.patch
│   ├── blk-mq-miscellaneous-v6
│   │   ├── 0790-blk-mq-avoid-to-map-CPU-into-stale-hw-queue.patch
│   │   ├── 0790-blk-mq-fix-race-between-updating-nr_hw_queues-and-switching-io-sched.patch
│   │   ├── 0790-blk-mq-quiesce-queue-before-freeing-queue.patch
│   │   ├── 0790-blk-mq-quiesce-queue-during-switching-io-sched-and-updating-nr_requests.patch
│   │   ├── 0790-blk-mq-support-concurrent-blk_mq_quiesce_queue().patch
│   │   └── 0790-nvme-pci-remove-init_request-callback.patch
│   ├── blk-mq-miscellaneous-v7
│   │   ├── 0001-blk-mq-protect-completion-path-with-RCU.patch
│   │   ├── 0002-blk-mq-replace-timeout-synchronization-with-a-RCU-an.patch
│   │   ├── 0003-blk-mq-use-blk_mq_rq_state-instead-of-testing-REQ_AT.patch
│   │   ├── 0004-blk-mq-make-blk_abort_request-trigger-timeout-path.patch
│   │   ├── 0005-blk-mq-remove-REQ_ATOM_COMPLETE-usages-from-blk-mq.patch
│   │   └── 0006-blk-mq-remove-REQ_ATOM_STARTED.patch
│   ├── blk-mq-miscellaneous-v8
│   │   ├── 0991-blk-mq-avoid-to-map-CPU-into-stale-hw-queue.patch
│   │   ├── 0991-blk-mq-fix-race-between-updating-nr_hw_queues-and-switching-io-sched.patch
│   │   ├── 0991-blk-mq-quiesce-queue-before-freeing-queue.patch
│   │   └── 0991-blk-mq-quiesce-queue-during-switching-io-sched-and-updating-nr_requests.patch
│   ├── blk-mq-miscellaneous-v9
│   │   ├── 0630-blk-mq-issue-request-directly-for-blk_insert_cloned_request.patch
│   │   ├── 0630-blk-mq-move-actual-issue-into-one-helper.patch
│   │   ├── 0630-blk-mq-return-dispatch-result-to-caller-in-blk_mq_try_issue_directly.patch
│   │   ├── 0630-dm-mpath-don't-call-blk_mq_delay_run_hw_queue()-in-case-of-BLK_STS_RESOURCE.patch
│   │   └── 0630-dm-mpath-return-DM_MAPIO_REQUEUE-in-case-of-rq-allocation-failure.patch
│   ├── blk-mq-v10
│   │   ├── 0050-blk-mq-sched-dispatch-from-scheduler-only-after-progress-is-made-on->dispatch.patch
│   │   ├── 0051-blk-mq-sched-move-actual-dispatching-into-one-helper.patch
│   │   ├── 0052-blk-mq-sbitmap-introduce__sbitmap_for_each_set().patch
│   │   ├── 0053-blk-mq-block-kyber-check-if-there-is-request-in-ctx-in-kyber_has_work().patch
│   │   ├── 0054-blk-mq-introduce-get_budget-and-put_budget-in-blk_mq_ops.patch
│   │   ├── 0055-blk-mq-sched-improve-dispatching-from-sw-queue.patch
│   │   ├── 0056-blk-mq-SCSI-allow-to-pass-null-rq-to-scsi_prep_state_check().patch
│   │   └── 0057-blk-mq-SCSI-implement-get-budget-and-put_budget-for-blk-mq.patch
│   ├── block-blk
│   │   ├── 0080-block-blk-don't-handle-TAG_SHARED-in-restart.patch
│   │   └── 0081-block-blk-don't-restart-queue-when-get_budget-returns-BLK_STS_RESOURCE.patch
│   ├── block-blk-v2
│   │   ├── 0080-block-blk-run-queue-before-waiting-for-q_usage_counter-becoming-zero.patch
│   │   └── 0081-block-blk-drain-blkcg-part-of-request_queue in blk_cleanup_queue().patch
│   └── block-scsi
│       ├── 0070-block-scsi-run-idle-hctx-after-delay-in-scsi_mq_get_budget().patch
│       └── 0071-block-scsi-don't-handle-TAG_SHARED-in-restart.patch
├── 4.15
│   ├── 0100-Check-presence-on-tree-of-every-entity-after-every-a.patch
│   ├── 0700-block-bfq-fixes.patch
│   ├── 0710-block-bfq-fixes.patch
│   ├── 4.15-bfq-sq-mq-git-20180113.patch
│   ├── 4.15-bfq-sq-mq-git-20180130.patch
│   ├── 4.15-bfq-sq-mq-git-20180205.patch
│   ├── 4.15-bfq-sq-mq-git-20180207.patch
│   ├── 4.15-bfq-sq-mq-git-20180208.patch
│   ├── 4.15-bfq-sq-mq-git-20180227.patch
│   ├── 4.15-bfq-sq-mq-git-20180404.patch
│   ├── bfq-paolo-v1
│   │   ├── 0001-block-bfq-put-async-queues-for-root-bfq-groups-too.patch
│   │   └── 0002-block-bfq-release-oom-queue-ref-to-root-group-on-exit.patch
│   ├── bfq-paolo-v2
│   │   ├── 0001-block-bfq-put-async-queues-for-root-bfq-groups-too.patch
│   │   └── 0002-block-bfq-release-oom-queue-ref-to-root-group-on-exit.patch
│   ├── bfq-paolo-v2-fix
│   │   └── 0003-block-bfq-compile-group-put-for-oom-queue-only-if-BFQ_GROUP_IOSCHED-is-set.patch
│   ├── bfq-paolo-v3
│   │   ├── 0929-block-bfq-limit-sectors-served-with-interactive-weight-raising.patch
│   │   └── 0929-block-bfq-limit-tags-for-writes-and-async-IO.patch
│   ├── bfq-paolo-v4
│   │   └── 0800-block-bfq-add-requeue-request-hook.patch
│   ├── bfq-pf
│   │   └── 0900-block-bfq-lower-bound-the-estimated-peak-rate-to-1.patch
│   ├── blk-mq-miscellaneous-v1
│   │   ├── 0630-blk-mq-issue-request-directly-for-blk_insert_cloned_request.patch
│   │   ├── 0630-blk-mq-move-actual-issue-into-one-helper.patch
│   │   ├── 0630-blk-mq-return-dispatch-result-to-caller-in-blk_mq_try_issue_directly.patch
│   │   ├── 0630-dm-mpath-don't-call-blk_mq_delay_run_hw_queue()-in-case-of-BLK_STS_RESOURCE.patch
│   │   └── 0630-dm-mpath-return-DM_MAPIO_REQUEUE-in-case-of-rq-allocation-failure.patch
│   ├── blk-mq-miscellaneous-v2
│   │   └── 0222-blk-mq-don't-clear-RQF_MQ_INFLIGHT-in-blk_mq_rq_ctx_init().patch
│   ├── blk-mq-miscellaneous-v3
│   │   ├── 0333-blk-mq-move-actual-issue-into-one-helper.patch
│   │   ├── 0334-blk-mq-return-dispatch-result-to-caller-in-blk_mq_try_issue_directly.patch
│   │   └── 0335-blk-mq-issue-request-directly-for-blk_insert_cloned_request.patch
│   ├── blk-mq-miscellaneous-v4
│   │   ├── 0336-blk-mq-make-sure-hctx->next_cpu-is-set-correctly.patch
│   │   └── 0337-blk-mq-avoid-one-WARN_ON-in__blk_mq_run_hw_queue-to-printk.patch
│   ├── blk-mq-miscellaneous-v5
│   │   ├── 0444-blk-mq-introduce-BLK_STS_DEV_RESOURCE.patch
│   │   ├── 0445-dm-rq-handle-dispatch-exception-in-dm_dispatch_clone_request().patch
│   │   ├── 0446-dm-rq-return-BLK_STS_from map_request().patch
│   │   ├── 0447-blk-mq-introduce-blk_get_request_notify.patch
│   │   └── 0448-dm-mpath-use-blk_mq_alloc_request_notify-for-allocating-blk-mq req.patch
│   ├── blk-mq-miscellaneous-v6
│   │   ├── 0711-blk-mq-tags-define-several-fields-of-tags-as-pointer.patch
│   │   ├── 0712-blk-mq-introduce-BLK_MQ_F_GLOBAL_TAGS.patch
│   │   ├── 0713-blk-mq-scsi-add-template-flag-host_tagset.patch
│   │   ├── 0714-blk-mq-block-null_blk-introduce-module-parameter-of-g_global_tags.patch
│   │   ├── 0715-blk-mq-scsi-introduce-force_blk_mq.patch
│   │   ├── 0716-blk-mq-scsi-virtio_scsi-fix-IO-hang-by-irq-vector-automatic-affinity.patch
│   │   ├── 0717-blk-mq-scsi-hpsa-call-hpsa_hba_inquiry()-after-adding-host.patch
│   │   └── 0718-blk-mq-scsi-hpsa-use blk_mq-to-solve-irq-affinity-issue.patch
│   ├── blk-mq-miscellaneous-v7
│   │   ├── 0050-scsi-hpsa-fix-selection-of-reply-queue.patch
│   │   ├── 0051-scsi-megaraid_sas-fix-selection-of-reply-queue.patch
│   │   ├── 0052-blk-mq-introduce-start_tag-field-to-struct-blk_mq_tags.patch
│   │   ├── 0053-blk-mq-introduce-BLK_MQ_F_HOST_TAGS.patch
│   │   ├── 0054-scsi-Add-template-flag-host_tagset.patch
│   │   ├── 0055-block-null_blk-introduce-module-parameter-of-g_host_tags.patch
│   │   ├── 0056-scsi-hpsa-improve-scsi_mq-performance-via-host_tagset.patch
│   │   └── 0057-scsi-megaraid-improve-scsi_mq-performanc-via-host_tagset.patch
│   └── blk-pf
│       └── 0010-blk-mq-dont-call-io-scheds-requeue_request.patch
├── 4.16
│   ├── 0004-fix-gcc8-bogus-warnings.patch
│   ├── 0005-objtool-add-gcc8-support.patch
│   ├── 0006-include-linux-add-gcc8-support.patch
│   ├── 0100-Check-presence-on-tree-of-every-entity-after-every-a.patch
│   ├── 4.16-bfq-sq-mq-git-20180410.patch
│   ├── 4.16-bfq-sq-mq-git-20180412.patch
│   ├── 4.16-bfq-sq-mq-git-20180516.patch
│   ├── 4.16-bfq-sq-mq-git-20180531.patch
│   ├── 4.16-bfq-sq-mq-git-20180531-v2.patch
│   ├── 4.16-bfq-sq-mq-git-lucjan-20180404.patch
│   ├── bfq-paolo
│   │   ├── 0902-block-bfq-remove-wrong-lock-in-bfq_requests_merged.patch
│   │   ├── 0903-block-bfq-remove-wrong-check-in-bfq_requests_merged.patch
│   │   ├── 0904-block-bfq-remove-the-removal-of-next-rq-in-bfq_requests_merged.patch
│   │   ├── 0905-block-bfq-add-description-of-weight-raising-heuristics.patch
│   │   ├── 0906-block-bfq-remove-slow-system-class.patch
│   │   ├── 0907-block-bfq-increase-weight-raising-duration-for-interactive-apps.patch
│   │   └── 0908-block-bfq-prevent-soft_rt_next_start-from-being-stuck-at-infinity.patch
│   ├── bfq-pf
│   │   ├── 0900-block-bfq-lower-bound-the-estimated-peak-rate-to-1.patch
│   │   └── 0901-block-bfq-postpone-rq-preparation-to-insert-or-merge.patch
│   ├── bfq-sq-mq
│   │   ├── 4.16-bfq-sq-mq-v8r12-2K180531.patch
│   │   ├── 4.16-bfq-sq-mq-v8r12-2K180531-v2.patch
│   │   ├── 4.16-bfq-sq-mq-v8r12-2K180531-v3.patch
│   │   └── 4.16-bfq-sq-mq-v8r12-2K180625.patch
│   ├── blk-mq-miscellaneous-v1
│   │   └── 0010-blk-mq-fix-race-between-complete-and-BLK_EH_RESET_TIMER.patch
│   ├── blk-mq-miscellaneous-v2
│   │   ├── 0011-blk-mq-make-sure-that-correct-hctx->next_cpu-is-set.patch
│   │   ├── 0012-blk-mq-dont-keep-offline-CPUs-mapped-to-hctx0.patch
│   │   ├── 0013-blk-mq-avoid-to-write-intermediate-result-to-hctx->next_cpu.patch
│   │   ├── 0014-blk-mq-introduce-blk_mq_hw_queue_first_cpu()-to-figure-out-first-cpu.patch
│   │   ├── 0015-blk-mq-remove-blk_mq_delay_queue().patch
│   │   ├── 0016-blk-mq-dont-check-queue-mapped-in__blk_mq_delay_run_hw_queue().patch
│   │   ├── 0017-blk-mq-reimplement-blk_mq_hw_queue_mapped.patch
│   │   └── 0018-blk-mq-remove-code-for-dealing-with-remapping-queue.patch
│   ├── blk-mq-miscellaneous-v3
│   │   ├── 0019-blk-mq-set-RQF_MQ_TIMEOUT_EXPIRED-when-the-rqs-timeout-isnt-handled.patch
│   │   └── 0020-blk-mq-fix-race-between-complete-and-BLK_EH_RESET_TIMER.patch
│   ├── blk-mq-miscellaneous-v4
│   │   └── 0022-blk-mq-avoid-to-starve-tag-allocation-after-allocation-process-migrates.patch
│   ├── blk-mq-miscellaneous-v5
│   │   ├── 0023-blk-mq-fix-read-write-nr_requests-in-case-of-none-scheduler.patch
│   │   └── 0024-blk-mq-update-nr_requests-when-switching-to-none-scheduler.patch
│   ├── blk-pf
│   │   └── 0910-bfq-blk-fixes-from-pfkernel.patch
│   ├── block-miscellaneous
│   │   ├── 0200-block-move-initialization-of-elevator-related-fields-to-blk_alloc_queue_node.patch
│   │   ├── 0201-block-unexport-elevator_init-exit.patch
│   │   ├── 0202-block-remove-the-always-unused-name-argument-to-elevator_init.patch
│   │   ├── 0203-block-move-sysfs_lock-into-elevator_init.patch
│   │   ├── 0204-block-split-the-blk-mq-case-from-elevator_init.patch
│   │   └── 0205-blk-mq-defer-IO-scheduler-initialization-until-add_disk.patch
│   ├── block-nvme
│   │   ├── 0021-block-introduce_blk_quiesce_timeout()_and_blk_unquiesce_timeout().patch
│   │   ├── 0022-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0023-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0024-nvme-fix-race-between-freeze-queues-and-unfreeze-queues.patch
│   │   └── 0025-nvme-pci-simplify-timeout-handling.patch
│   ├── block-nvme-v2
│   │   ├── 0021-block-introduce-blk_quiesce_timeout()-and-blk_unquiesce_timeout().patch
│   │   ├── 0022-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0023-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0024-nvme-pci-freeze-queue-in-nvme_dev_disable()-in-case-of-error-recovery.patch
│   │   ├── 0025-nvme-fix-race-between-freeze-queues-and-unfreeze-queues.patch
│   │   ├── 0026-nvme-pci-split-controller-resetting-into-two-parts.patch
│   │   ├── 0027-nvme-pci-recover-controller-reliably.patch
│   │   └── 0028-nvme-pci-simplify-timeout-handling.patch
│   ├── block-nvme-v3
│   │   ├── 0021-block-introduce-blk_quiesce_timeout()-and-blk_unquiesce_timeout().patch
│   │   ├── 0022-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0023-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0024-nvme-pci-freeze-queue-in-nvme_dev_disable()-in-case-of-error-recovery.patch
│   │   ├── 0025-nvme-core-introduce-reset_lock-for-sync-reset-state-and-reset-activities.patch
│   │   ├── 0026-nvme-pci-prepare-for-supporting-error-recovery-from-resetting-context.patch
│   │   └── 0027-nvme-pci-support-nested-EH.patch
│   ├── block-nvme-v4
│   │   ├── 0021-block-introduce-blk_quiesce_timeout()-and-blk_unquiesce_timeout().patch
│   │   ├── 0022-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0023-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0024-nvme-pci-freeze-queue-in-nvme_dev_disable()-in-case-of-error-recovery.patch
│   │   ├── 0025-nvme-pci-prepare-for-supporting-error-recovery-from-resetting-context.patch
│   │   ├── 0026-nvme-pci-move-error-handling-out-of-nvme_reset_dev().patch
│   │   ├── 0027-nvme-pci-dont-unfreeze-queue-until-controller-state-updating-succeeds.patch
│   │   ├── 0028-nvme-core-introduce-nvme_force_change_ctrl_state().patch
│   │   └── 0029-nvme-pci-support-nested-EH.patch
│   ├── block-nvme-v5
│   │   ├── 0021-block-introduce-blk_quiesce_timeout()-and-blk_unquiesce_timeout().patch
│   │   ├── 0022-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0023-nvme-pci-unquiesce-admin-queue-after-controller-is-shutdown.patch
│   │   ├── 0024-nvme-pci-set-nvmeq-cq_vector-after-alloc-cq-sq.patch
│   │   ├── 0025-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0026-nvme-pci-freeze-queue-in-nvme_dev_disable-in-case-of-error-recovery.patch
│   │   ├── 0027-nvme-pci-prepare-for-supporting-error-recovery-from-resetting-context.patch
│   │   ├── 0028-nvme-pci-move-error-handling-out-of-nvme_reset_dev().patch
│   │   ├── 0029-nvme-pci-dont-unfreeze-queue-until-controller-state-updating-succeeds.patch
│   │   ├── 0030-nvme-core-introduce-nvme_force_change_ctrl_state().patch
│   │   └── 0031-nvme-pci-support-nested-EH.patch
│   └── block-pf
│       ├── 0920-block-fixes-from-pfkernel.patch
│       └── 0930-block-fixes-from-pfkernel.patch
├── 4.17
│   ├── 0004-fix-gcc8-bogus-warnings.patch
│   ├── 0005-objtool-add-gcc8-support.patch
│   ├── 0006-include-linux-add-gcc8-support.patch
│   ├── 0100-Check-presence-on-tree-of-every-entity-after-every-a.patch
│   ├── 4.17-bfq-sq-mq-git-20180412.patch
│   ├── 4.17-bfq-sq-mq-git-20180516.patch
│   ├── 4.17-bfq-sq-mq-git-20180531.patch
│   ├── 4.17-bfq-sq-mq-git-20180531-v2.patch
│   ├── bfq-paolo
│   │   ├── 0902-block-bfq-remove-wrong-lock-in-bfq_requests_merged.patch
│   │   ├── 0903-block-bfq-remove-wrong-check-in-bfq_requests_merged.patch
│   │   ├── 0904-block-bfq-remove-the-removal-of-next-rq-in-bfq_requests_merged.patch
│   │   ├── 0905-block-bfq-add-description-of-weight-raising-heuristics.patch
│   │   ├── 0906-block-bfq-remove-slow-system-class.patch
│   │   ├── 0907-block-bfq-increase-weight-raising-duration-for-interactive-apps.patch
│   │   └── 0908-block-bfq-prevent-soft_rt_next_start-from-being-stuck-at-infinity.patch
│   ├── bfq-pf
│   │   └── 0901-block-bfq-postpone-rq-preparation-to-insert-or-merge.patch
│   ├── bfq-sq-mq
│   │   ├── 4.17-bfq-sq-mq-v8r12-2K180531.patch
│   │   ├── 4.17-bfq-sq-mq-v8r12-2K180531-v2.patch
│   │   ├── 4.17-bfq-sq-mq-v8r12-2K180531-v3.patch
│   │   └── 4.17-bfq-sq-mq-v8r12-2K180625.patch
│   ├── blk-mq-miscellaneous-v1
│   │   └── 0022-blk-mq-avoid-to-starve-tag-allocation-after-allocation-process-migrates.patch
│   ├── blk-mq-miscellaneous-v2
│   │   ├── 0023-blk-mq-fix-read-write-nr_requests-in-case-of-none-scheduler.patch
│   │   └── 0024-blk-mq-update-nr_requests-when-switching-to-none-scheduler.patch
│   ├── blk-pf
│   │   └── 0910-bfq-blk-fixes-from-pfkernel.patch
│   ├── block-miscellaneous
│   │   ├── 0200-block-move-initialization-of-elevator-related-fields-to-blk_alloc_queue_node.patch
│   │   ├── 0201-block-unexport-elevator_init-exit.patch
│   │   ├── 0202-block-remove-the-always-unused-name-argument-to-elevator_init.patch
│   │   ├── 0203-block-move-sysfs_lock-into-elevator_init.patch
│   │   ├── 0204-block-split-the-blk-mq-case-from-elevator_init.patch
│   │   └── 0205-blk-mq-defer-IO-scheduler-initialization-until-add_disk.patch
│   ├── block-nvme
│   │   ├── 0001-block-introduce_blk_quiesce_timeout()_and_blk_unquiesce_timeout().patch
│   │   ├── 0002-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0003-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0004-nvme-fix-race-between-freeze-queues-and-unfreeze-queues.patch
│   │   └── 0005-nvme-pci-simplify-timeout-handling.patch
│   ├── block-nvme-v2
│   │   ├── 0001-block-introduce-blk_quiesce_timeout()-and-blk_unquiesce_timeout().patch
│   │   ├── 0002-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0003-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0004-nvme-pci-freeze-queue-in-nvme_dev_disable()-in-case-of-error-recovery.patch
│   │   ├── 0005-nvme-fix-race-between-freeze-queues-and-unfreeze-queues.patch
│   │   ├── 0006-nvme-pci-split-controller-resetting-into-two-parts.patch
│   │   ├── 0007-nvme-pci-recover-controller-reliably.patch
│   │   └── 0008-nvme-pci-simplify-timeout-handling.patch
│   ├── block-nvme-v3
│   │   ├── 0001-block-introduce-blk_quiesce_timeout()-and-blk_unquiesce_timeout().patch
│   │   ├── 0002-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0003-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0004-nvme-pci-freeze-queue-in-nvme_dev_disable()-in-case-of-error-recovery.patch
│   │   ├── 0005-nvme-core-introduce-reset_lock-for-sync-reset-state-and-reset-activities.patch
│   │   ├── 0006-nvme-pci-prepare-for-supporting-error-recovery-from-resetting-context.patch
│   │   └── 0007-nvme-pci-support-nested-EH.patch
│   ├── block-nvme-v4
│   │   ├── 0001-block-introduce-blk_quiesce_timeout()-and-blk_unquiesce_timeout().patch
│   │   ├── 0002-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0003-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0004-nvme-pci-freeze-queue-in-nvme_dev_disable()-in-case-of-error-recovery.patch
│   │   ├── 0005-nvme-pci-prepare-for-supporting-error-recovery-from-resetting-context.patch
│   │   ├── 0006-nvme-pci-move-error-handling-out-of-nvme_reset_dev().patch
│   │   ├── 0007-nvme-pci-dont-unfreeze-queue-until-controller-state-updating-succeeds.patch
│   │   ├── 0008-nvme-core-introduce-nvme_force_change_ctrl_state().patch
│   │   └── 0009-nvme-pci-support-nested-EH.patch
│   ├── block-nvme-v5
│   │   ├── 0001-block-introduce-blk_quiesce_timeout()-and-blk_unquiesce_timeout().patch
│   │   ├── 0002-nvme-pci-cover-timeout-for-admin-commands-running-in-EH.patch
│   │   ├── 0003-nvme-pci-unquiesce-admin-queue-after-controller-is-shutdown.patch
│   │   ├── 0004-nvme-pci-set-nvmeq-cq_vector-after-alloc-cq-sq.patch
│   │   ├── 0005-nvme-pci-only-wait-freezing-if-queue-is-frozen.patch
│   │   ├── 0006-nvme-pci-freeze-queue-in-nvme_dev_disable-in-case-of-error-recovery.patch
│   │   ├── 0007-nvme-pci-prepare-for-supporting-error-recovery-from-resetting-context.patch
│   │   ├── 0008-nvme-pci-move-error-handling-out-of-nvme_reset_dev().patch
│   │   ├── 0009-nvme-pci-dont-unfreeze-queue-until-controller-state-updating-succeeds.patch
│   │   ├── 0010-nvme-core-introduce-nvme_force_change_ctrl_state().patch
│   │   └── 0011-nvme-pci-support-nested-EH.patch
│   ├── block-pf
│   │   ├── 0920-block-fixes-from-pfkernel.patch
│   │   └── 0930-block-fixes-from-pfkernel.patch
│   ├── gcc-patch-backup-from-pf
│   │   └── 0001-gcctunes-4.17-merge-graysky-s-patchset.patch
│   ├── linux-lucjan
│   │   ├── 4.17-linux-lucjan-20180613.patch
│   │   ├── 4.17-linux-lucjan-20180613-v2.patch
│   │   ├── 4.17-linux-lucjan-20180625.patch
│   │   ├── 4.17-linux-lucjan-20180702.patch
│   │   ├── 4.17-linux-lucjan-20180709.patch
│   │   └── README.md
│   ├── pds-fixes
│   │   └── 0001-pds-Fix-compilation-issue-on-raspberry-pi.patch
│   ├── pf-block-fixes
│   │   ├── 0915-block-fixes-from-pfkernel.patch
│   │   └── 0916-block-fixes-from-pfkernel.patch
│   ├── pf-dell
│   │   ├── 0001-hwmon-dell-smm-Disable-fan-support-for-Dell-XPS13-93.patch
│   │   └── 0001-platform-x86-dell-wmi-support-Dell-Vostro-3360.patch
│   ├── pf-fixes
│   │   ├── 0900-fixes-from-pfkernel.patch
│   │   ├── 0910-fixes-from-pfkernel.patch
│   │   └── 0910-fixes-from-pfkernel-v2.patch
│   ├── pf-fixes-sep
│   │   ├── 0001-block-bfq-postpone-rq-preparation-to-insert-or-merge.patch
│   │   ├── 0002-blk-mq-don-t-call-into-depth-limiting-for-reserved-t.patch
│   │   ├── 0003-bfq-iosched-don-t-worry-about-reserved-tags-in-limit.patch
│   │   ├── 0004-bfq-calculate-shallow-depths-at-init-time.patch
│   │   ├── 0005-bfq-iosched-remove-unused-variable.patch
│   │   ├── 0006-sbitmap-fix-missed-wakeups-caused-by-sbitmap_queue_g.patch
│   │   ├── 0007-bfq-iosched-update-shallow-depth-to-smallest-one-use.patch
│   │   ├── 0008-kyber-iosched-update-shallow-depth-when-setting-up-h.patch
│   │   ├── 0009-sbitmap-warn-if-using-smaller-shallow-depth-than-was.patch
│   │   ├── 0010-block-break-discard-submissions-into-the-user-define.patch
│   │   ├── 0011-blk-wbt-account-any-writing-command-as-a-write.patch
│   │   ├── 0012-blk-wbt-pass-in-enum-wbt_flags-to-get_rq_wait.patch
│   │   ├── 0013-blk-wbt-throttle-discards-like-background-writes.patch
│   │   ├── 0014-blk-mq-avoid-to-starve-tag-allocation-after-allocati.patch
│   │   ├── 0015-block-bfq-remove-wrong-lock-in-bfq_requests_merged.patch
│   │   ├── 0016-block-bfq-remove-wrong-check-in-bfq_requests_merged.patch
│   │   ├── 0017-block-bfq-remove-the-removal-of-next-rq-in-bfq_reque.patch
│   │   ├── 0018-block-bfq-add-description-of-weight-raising-heuristi.patch
│   │   ├── 0019-block-bfq-remove-slow-system-class.patch
│   │   ├── 0020-block-bfq-increase-weight-raising-duration-for-inter.patch
│   │   └── 0021-block-bfq-prevent-soft_rt_next_start-from-being-stuc.patch
│   ├── pf-miscellaneous
│   │   └── 0001-fixes-4.17-unmask-CHECKPOINT_RESTORE.patch
│   ├── pf-miscellaneous-v2
│   │   ├── 0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
│   │   └── 0002-Revert-drm-i915-edp-Allow-alternate-fixed-mode-for-e.patch
│   ├── pf-miscellaneous-v3
│   │   └── 0001-ACPI-watchdog-Prefer-iTCO_wdt-always-when-WDAT-table.patch
│   ├── pf-pds
│   │   ├── 0001-pds-4.17-merge-PDS-v0.98q.patch
│   │   └── 0001-pds-4.17-merge-PDS-v0.98r.patch
│   └── pf-uksm
│       └── 0001-uksm-4.17-initial-submission.patch
├── 4.9
│   └── 0005-BFQ-update-to-v8r12.patch
├── Files
└── README.md

111 directories, 557 files
