From d23191fda781776f5e1a278ec6f601e70acd0de3 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Tue, 11 Dec 2018 15:38:16 +0800
Subject: [PATCH 32/42] pds: Rework time_slice_expired()

---
 include/linux/sched/prio.h |  4 ++--
 kernel/sched/pds.c         | 35 ++++++++++++++---------------------
 2 files changed, 16 insertions(+), 23 deletions(-)

diff --git a/include/linux/sched/prio.h b/include/linux/sched/prio.h
index d98cab2a0efb..162c2e649d0f 100644
--- a/include/linux/sched/prio.h
+++ b/include/linux/sched/prio.h
@@ -26,8 +26,8 @@
 
 #define MAX_RT_PRIO		((MAX_USER_RT_PRIO) + 1)
 
-#define NORMAL_PRIO		((MAX_USER_RT_PRIO) + 1)
-#define IDLE_PRIO		((MAX_USER_RT_PRIO) + 2)
+#define NORMAL_PRIO		(MAX_USER_RT_PRIO)
+#define IDLE_PRIO		((MAX_USER_RT_PRIO) + 1)
 #define PRIO_LIMIT		((IDLE_PRIO) + 1)
 #else /* !CONFIG_SCHED_PDS */
 #define MAX_RT_PRIO		MAX_USER_RT_PRIO
diff --git a/kernel/sched/pds.c b/kernel/sched/pds.c
index 5c0c088d6d62..494c145c642f 100644
--- a/kernel/sched/pds.c
+++ b/kernel/sched/pds.c
@@ -397,6 +397,20 @@ static inline u64 static_deadline_diff(int static_prio)
 	return sched_prio2deadline[USER_PRIO(static_prio)];
 }
 
+/*
+ * The time_slice is only refilled when it is empty and that is when we set a
+ * new deadline for non-rt tasks.
+ */
+static inline void time_slice_expired(struct task_struct *p, struct rq *rq)
+{
+	p->time_slice = timeslice();
+
+	if (p->prio >= NORMAL_PRIO) {
+		p->deadline = rq->clock + task_deadline_diff(p);
+		update_task_priodl(p);
+	}
+}
+
 static inline struct task_struct *rq_first_queued_task(struct rq *rq)
 {
 	struct skiplist_node *node = rq->sl_header.next[0];
@@ -2047,8 +2061,6 @@ int wake_up_state(struct task_struct *p, unsigned int state)
 	return try_to_wake_up(p, state, 0);
 }
 
-static void time_slice_expired(struct task_struct *p, struct rq *rq);
-
 /*
  * Perform scheduler related setup for a newly forked process p.
  * p is forked by current.
@@ -3098,25 +3110,6 @@ static inline void preempt_latency_start(int val) { }
 static inline void preempt_latency_stop(int val) { }
 #endif
 
-/*
- * The time_slice is only refilled when it is empty and that is when we set a
- * new deadline.
- */
-static void time_slice_expired(struct task_struct *p, struct rq *rq)
-{
-	p->time_slice = timeslice();
-
-	if (unlikely(task_has_rt_policy(p)))
-		return;
-	if (p->policy == SCHED_NORMAL) {
-		p->deadline /= 2;
-		p->deadline += (rq->clock + task_deadline_diff(p)) / 2;
-	} else
-		p->deadline = rq->clock + task_deadline_diff(p);
-
-	update_task_priodl(p);
-}
-
 /*
  * Timeslices below RESCHED_US are considered as good as expired as there's no
  * point rescheduling when there's so little time left. SCHED_BATCH tasks
-- 
2.20.1.2.gb21ebb671b

