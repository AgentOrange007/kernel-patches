From cb78c5a7897d86cbd0f3660c8fe65d821c19ca7d Mon Sep 17 00:00:00 2001
From: Steven Barrett <steven@liquorix.net>
Date: Sun, 2 Jun 2019 13:40:24 -0500
Subject: [PATCH 30/31] Revert "add scheduler turbo3 patch"

This reverts commit 413d025caeea77b53769eec5560c4cd583e5b0b9.

Fails to build:

ld: arch/x86/kernel/itmt.o: in function `sched_set_itmt_core_prio':
itmt.c:(.text+0x20f): undefined reference to `best_core'
ld: itmt.c:(.text+0x225): undefined reference to `second_best_core'
---
 arch/x86/kernel/itmt.c | 14 --------------
 kernel/sched/fair.c    | 19 -------------------
 2 files changed, 33 deletions(-)

diff --git a/arch/x86/kernel/itmt.c b/arch/x86/kernel/itmt.c
index 865b105df730..d177940aa090 100644
--- a/arch/x86/kernel/itmt.c
+++ b/arch/x86/kernel/itmt.c
@@ -179,11 +179,6 @@ int arch_asym_cpu_priority(int cpu)
 	return per_cpu(sched_core_priority, cpu);
 }
 
-extern int best_core;
-extern int second_best_core;
-static int best_core_score;
-static int second_best_core_score;
-
 /**
  * sched_set_itmt_core_prio() - Set CPU priority based on ITMT
  * @prio:	Priority of cpu core
@@ -213,14 +208,5 @@ void sched_set_itmt_core_prio(int prio, int core_cpu)
 		smt_prio = prio * smp_num_siblings / i;
 		per_cpu(sched_core_priority, cpu) = smt_prio;
 		i++;
-
-		if (smt_prio > best_core_score) {
-			best_core = cpu;
-			best_core_score = smt_prio;
-		} else
-		if (smt_prio > second_best_core_score) {
-			second_best_core = cpu;
-			second_best_core_score = smt_prio;
-		}
 	}
 }
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 8dfd5217a0a2..35f3ea375084 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6670,10 +6670,6 @@ static int find_energy_efficient_cpu(struct task_struct *p, int prev_cpu)
  *
  * preempt must be disabled.
  */
-
-int best_core = -1;
-int second_best_core = -1;
-
 static int
 select_task_rq_fair(struct task_struct *p, int prev_cpu, int sd_flag, int wake_flags)
 {
@@ -6697,21 +6693,6 @@ select_task_rq_fair(struct task_struct *p, int prev_cpu, int sd_flag, int wake_f
 			      cpumask_test_cpu(cpu, &p->cpus_allowed);
 	}
 
-	if (prev_cpu != best_core && prev_cpu != second_best_core &&
-		       cpu_rq(prev_cpu)->nr_running != 0) {
-		if (second_best_core != -1 && cpu_rq(second_best_core)->nr_running == 0 &&
-			       nr_iowait_cpu(second_best_core) < 2 && cpu_to_node(prev_cpu) == cpu_to_node(second_best_core))
-			prev_cpu = second_best_core;
-		if (best_core != -1 && cpu_rq(best_core)->nr_running == 0 &&
-			       nr_iowait_cpu(best_core) < 2  && cpu_to_node(prev_cpu) == cpu_to_node(best_core))
-			prev_cpu = best_core;
-	}
-/*
-	if (prev_cpu > 0 && cpu_rq(prev_cpu)->nr_running != 0 && cpu_rq(prev_cpu - 1)->nr_running == 0)
-		prev_cpu = prev_cpu - 1;
-*/
-
-
 	rcu_read_lock();
 	for_each_domain(cpu, tmp) {
 		if (!(tmp->flags & SD_LOAD_BALANCE))
-- 
2.22.0.rc2

