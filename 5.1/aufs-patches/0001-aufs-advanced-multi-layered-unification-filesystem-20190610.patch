From 99b98c6c9076bb11ec3d01d5e684dc3af05ccc2a Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Thu, 23 May 2019 23:20:21 +0900
Subject: [PATCH 1/8] aufs: bugfix, protect creating XINO from concurrent
 mounts

At the mount-time, XINO files are created and removed very soon.  When
multiple mounts with being given the same XINO file path executed in
parallel, some of them may fail in creating XINO due to EEXIST.
Introducing a local mutex, make it serialized.
By default, XINO is created at the top dir of the first writable
branch.  In this case, the new mutex won't be used.

Obviously this is an unnecessary overhead when the XINO file path is not
same, and such lock should be done by inode_lock() for the parent dir.
Actually au_xino_create2() behaves in this manner.  Then why didn't I
apply the same way to this au_xino_create()?  It is just because of my
laziness.  Calling VFS filp_open() here is easy for me.

Reported-by: Kirill Kolyshkin <kolyshkin@gmail.com>
Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
(cherry picked from commit 30d9273f2a1ce331b1a79b770bdb4c493919a673)
---
 fs/aufs/branch.h |  3 ++-
 fs/aufs/opts.c   |  2 +-
 fs/aufs/xino.c   | 15 ++++++++++++---
 3 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/fs/aufs/branch.h b/fs/aufs/branch.h
index f99063aa54cd..012459ad57f3 100644
--- a/fs/aufs/branch.h
+++ b/fs/aufs/branch.h
@@ -225,7 +225,8 @@ int au_br_stfs(struct au_branch *br, struct aufs_stfs *stfs);
 static const loff_t au_loff_max = LLONG_MAX;
 
 aufs_bindex_t au_xi_root(struct super_block *sb, struct dentry *dentry);
-struct file *au_xino_create(struct super_block *sb, char *fpath, int silent);
+struct file *au_xino_create(struct super_block *sb, char *fpath, int silent,
+			    int wbrtop);
 struct file *au_xino_create2(struct super_block *sb, struct path *base,
 			     struct file *copy_src);
 struct au_xi_new {
diff --git a/fs/aufs/opts.c b/fs/aufs/opts.c
index 1cd07cd30320..c92ca14574ff 100644
--- a/fs/aufs/opts.c
+++ b/fs/aufs/opts.c
@@ -918,7 +918,7 @@ static int au_opts_parse_xino(struct super_block *sb, struct au_opt_xino *xino,
 	int err;
 	struct file *file;
 
-	file = au_xino_create(sb, args[0].from, /*silent*/0);
+	file = au_xino_create(sb, args[0].from, /*silent*/0, /*wbrtop*/0);
 	err = PTR_ERR(file);
 	if (IS_ERR(file))
 		goto out;
diff --git a/fs/aufs/xino.c b/fs/aufs/xino.c
index 7733b9a28779..35ea33469d36 100644
--- a/fs/aufs/xino.c
+++ b/fs/aufs/xino.c
@@ -160,22 +160,28 @@ static void au_xino_unlock_dir(struct au_xino_lock_dir *ldir)
 /*
  * create and set a new xino file
  */
-struct file *au_xino_create(struct super_block *sb, char *fpath, int silent)
+struct file *au_xino_create(struct super_block *sb, char *fpath, int silent,
+			    int wbrtop)
 {
 	struct file *file;
 	struct dentry *h_parent, *d;
 	struct inode *h_dir, *inode;
 	int err;
+	static DEFINE_MUTEX(mtx);
 
 	/*
 	 * at mount-time, and the xino file is the default path,
 	 * hnotify is disabled so we have no notify events to ignore.
 	 * when a user specified the xino, we cannot get au_hdir to be ignored.
 	 */
+	if (!wbrtop)
+		mutex_lock(&mtx);
 	file = vfsub_filp_open(fpath, O_RDWR | O_CREAT | O_EXCL | O_LARGEFILE
 			       /* | __FMODE_NONOTIFY */,
 			       0666);
 	if (IS_ERR(file)) {
+		if (!wbrtop)
+			mutex_unlock(&mtx);
 		if (!silent)
 			pr_err("open %s(%ld)\n", fpath, PTR_ERR(file));
 		return file;
@@ -185,6 +191,8 @@ struct file *au_xino_create(struct super_block *sb, char *fpath, int silent)
 	err = 0;
 	d = file->f_path.dentry;
 	h_parent = au_dget_parent_lock(d, AuLsc_I_PARENT);
+	if (!wbrtop)
+		mutex_unlock(&mtx);
 	/* mnt_want_write() is unnecessary here */
 	h_dir = d_inode(h_parent);
 	inode = file_inode(file);
@@ -1667,11 +1675,12 @@ struct file *au_xino_def(struct super_block *sb)
 		if (!IS_ERR(p)) {
 			strcat(p, "/" AUFS_XINO_FNAME);
 			AuDbg("%s\n", p);
-			file = au_xino_create(sb, p, /*silent*/0);
+			file = au_xino_create(sb, p, /*silent*/0, /*wbrtop*/1);
 		}
 		free_page((unsigned long)page);
 	} else {
-		file = au_xino_create(sb, AUFS_XINO_DEFPATH, /*silent*/0);
+		file = au_xino_create(sb, AUFS_XINO_DEFPATH, /*silent*/0,
+				      /*wbrtop*/0);
 		if (IS_ERR(file))
 			goto out;
 		h_sb = file->f_path.dentry->d_sb;
-- 
2.22.0.214.g8dca754b1e


From ffe4e8653ef7c7b6041f0af94833205be6cb301c Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Sun, 26 May 2019 16:58:53 +0900
Subject: [PATCH 2/8] aufs doc: new proc_mounts.patch

Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
(cherry picked from commit 94c692425480664a02aaac3d6f7d496ea1d05c1f)
---
 Documentation/filesystems/aufs/README | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/Documentation/filesystems/aufs/README b/Documentation/filesystems/aufs/README
index aaee1ea95a13..6e6774fbf602 100644
--- a/Documentation/filesystems/aufs/README
+++ b/Documentation/filesystems/aufs/README
@@ -249,6 +249,13 @@ optional. When you meet some problems, they will help you.
   Supports a nested loopback mount in a branch-fs. This patch is
   unnecessary until aufs produces a message like "you may want to try
   another patch for loopback file".
+- proc_mounts.patch
+  When there are many mountpoints and many mount(2)/umount(2) are
+  running, then /proc/mounts may not show the all mountpoints.  This
+  patch makes /proc/mounts always show the full mountpoints list.
+  If you don't want to apply this patch and meet such problem, then you
+  need to increase the value of 'ProcMounts_Times' make-variable in
+  aufs-util.git as a second best solution.
 - vfs-ino.patch
   Modifies a system global kernel internal function get_next_ino() in
   order to stop assigning 0 for an inode-number. Not directly related to
-- 
2.22.0.214.g8dca754b1e


From 843f0fa95d37266523cf7080aa419d0e5564f67e Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Mon, 27 May 2019 13:04:43 +0900
Subject: [PATCH 3/8] aufs: tiny, missing a parameter declaration

Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
(cherry picked from commit 9dbd45984201453ecebcc03a91699878aa38239d)
---
 fs/aufs/loop.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/fs/aufs/loop.h b/fs/aufs/loop.h
index 625bd78d99af..7fc394e72d75 100644
--- a/fs/aufs/loop.h
+++ b/fs/aufs/loop.h
@@ -40,7 +40,7 @@ void au_warn_loopback(struct super_block *h_sb);
 int au_loopback_init(void);
 void au_loopback_fin(void);
 #else
-AuStub(struct file *, loop_backing_file, return NULL)
+AuStub(struct file *, loop_backing_file, return NULL, struct super_block *sb)
 
 AuStubInt0(au_test_loopback_overlap, struct super_block *sb,
 	   struct dentry *h_adding)
-- 
2.22.0.214.g8dca754b1e


From 4e113c7e8988c755d4224fa02944d5e55378c679 Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Tue, 28 May 2019 16:42:30 +0900
Subject: [PATCH 4/8] aufs5.1 20190603

Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
---
 include/uapi/linux/aufs_type.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/include/uapi/linux/aufs_type.h b/include/uapi/linux/aufs_type.h
index f1607cdbcb6f..7ab67b4c3d78 100644
--- a/include/uapi/linux/aufs_type.h
+++ b/include/uapi/linux/aufs_type.h
@@ -40,7 +40,7 @@
 
 #include <linux/limits.h>
 
-#define AUFS_VERSION	"5.1-20190520"
+#define AUFS_VERSION	"5.1-20190603"
 
 /* todo? move this to linux-2.6.19/include/magic.h */
 #define AUFS_SUPER_MAGIC	('a' << 24 | 'u' << 16 | 'f' << 8 | 's')
-- 
2.22.0.214.g8dca754b1e


From 994c8c3b5067adb0ccaee5ed19c5567ffc02294d Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Tue, 4 Jun 2019 09:49:19 +0900
Subject: [PATCH 5/8] aufs: bugfix, ignore the being freed dynop object

Aufs DYNOP (Dynamically customizable FS operations) object is managed by
kref, and when its counter reaches zero, the callback function removes
the object from the internal list which is protected by a spinlock and
then frees the object.
Here there is a small time window between
A: the counter reaches zero, and
B: require the lock to remove the object from the list.
If someone else acquires the lock and searches the list, it may find the
counter-zero'ed object which means the object is being freed.
This commit ignores the object whose counter is already zero.

Reported-and-tested-by: Kirill Kolyshkin <kolyshkin@gmail.com>
Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
(cherry picked from commit b633d7b2635b9615fe294b85257d05008e3747a3)
---
 fs/aufs/dynop.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/fs/aufs/dynop.c b/fs/aufs/dynop.c
index b2d4263dae42..44b45edeaa70 100644
--- a/fs/aufs/dynop.c
+++ b/fs/aufs/dynop.c
@@ -40,8 +40,8 @@ static struct au_dykey *dy_gfind_get(struct hlist_bl_head *hbl,
 	hlist_bl_lock(hbl);
 	hlist_bl_for_each_entry(tmp, pos, hbl, dk_hnode)
 		if (tmp->dk_op.dy_hop == h_op) {
-			key = tmp;
-			kref_get(&key->dk_kref);
+			if (kref_get_unless_zero(&tmp->dk_kref))
+				key = tmp;
 			break;
 		}
 	hlist_bl_unlock(hbl);
@@ -95,8 +95,8 @@ static struct au_dykey *dy_gadd(struct hlist_bl_head *hbl, struct au_dykey *key)
 	hlist_bl_lock(hbl);
 	hlist_bl_for_each_entry(tmp, pos, hbl, dk_hnode)
 		if (tmp->dk_op.dy_hop == h_op) {
-			kref_get(&tmp->dk_kref);
-			found = tmp;
+			if (kref_get_unless_zero(&tmp->dk_kref))
+				found = tmp;
 			break;
 		}
 	if (!found)
-- 
2.22.0.214.g8dca754b1e


From 300dea9296ceb63c41f9af236a184f435809d127 Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Tue, 4 Jun 2019 16:12:24 +0900
Subject: [PATCH 6/8] aufs: possible bugfix, ignore the being freed sbinfo
 object

The scenario is very similar to previous commit
"aufs: bugfix, ignore the being freed dynop object".
One exception is that this commit is for sbinfo object which is managed
by kobject (instead of kref).

In order to enter the plink-maintenance mode, users write an ID to
"/proc/fs/aufs/plink_maint" (this path is defined as macros in
include/uapi/linux/aufs_type.h).  If someone else is unmounting the
aufs mount corresponding that ID, then the searcher task may find a
being freed sbinfo object.
The problem and the fix is very similar to previous commit
"aufs: bugfix, ignore the being freed dynop object".

Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
(cherry picked from commit 949b498ae30797b19b9e7ac9b230815f31ffe378)
---
 fs/aufs/procfs.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/fs/aufs/procfs.c b/fs/aufs/procfs.c
index 29c6377e888c..582dd486fcd3 100644
--- a/fs/aufs/procfs.c
+++ b/fs/aufs/procfs.c
@@ -61,8 +61,8 @@ static int au_procfs_plm_write_si(struct file *file, unsigned long id)
 	hlist_bl_lock(&au_sbilist);
 	hlist_bl_for_each_entry(sbinfo, pos, &au_sbilist, si_list)
 		if (id == sysaufs_si_id(sbinfo)) {
-			kobject_get(&sbinfo->si_kobj);
-			sb = sbinfo->si_sb;
+			if (kobject_get_unless_zero(&sbinfo->si_kobj))
+				sb = sbinfo->si_sb;
 			break;
 		}
 	hlist_bl_unlock(&au_sbilist);
-- 
2.22.0.214.g8dca754b1e


From d155be599ed5c3cce0c8004685105a7518320b39 Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Tue, 4 Jun 2019 08:52:22 +0900
Subject: [PATCH 7/8] aufs: bugfix, no nested RCU for kfree()

Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
(cherry picked from commit 4596850541ed7144f7fea951d02f0f6251c4a997)
---
 fs/aufs/dynop.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/fs/aufs/dynop.c b/fs/aufs/dynop.c
index 44b45edeaa70..ed79f8255a8f 100644
--- a/fs/aufs/dynop.c
+++ b/fs/aufs/dynop.c
@@ -114,7 +114,7 @@ static void dy_free_rcu(struct rcu_head *rcu)
 
 	key = container_of(rcu, struct au_dykey, dk_rcu);
 	DyPrSym(key);
-	au_kfree_rcu(key);
+	kfree(key);
 }
 
 static void dy_free(struct kref *kref)
-- 
2.22.0.214.g8dca754b1e


From 99c57b6399caaf26c43d4546d787e6b55831c6fd Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Sun, 9 Jun 2019 01:39:48 +0900
Subject: [PATCH 8/8] aufs5.1 20190610

Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
---
 include/uapi/linux/aufs_type.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/include/uapi/linux/aufs_type.h b/include/uapi/linux/aufs_type.h
index 7ab67b4c3d78..a19cbb220391 100644
--- a/include/uapi/linux/aufs_type.h
+++ b/include/uapi/linux/aufs_type.h
@@ -40,7 +40,7 @@
 
 #include <linux/limits.h>
 
-#define AUFS_VERSION	"5.1-20190603"
+#define AUFS_VERSION	"5.1-20190610"
 
 /* todo? move this to linux-2.6.19/include/magic.h */
 #define AUFS_SUPER_MAGIC	('a' << 24 | 'u' << 16 | 'f' << 8 | 's')
-- 
2.22.0.214.g8dca754b1e

