From 300dea9296ceb63c41f9af236a184f435809d127 Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Tue, 4 Jun 2019 16:12:24 +0900
Subject: [PATCH 6/8] aufs: possible bugfix, ignore the being freed sbinfo
 object

The scenario is very similar to previous commit
"aufs: bugfix, ignore the being freed dynop object".
One exception is that this commit is for sbinfo object which is managed
by kobject (instead of kref).

In order to enter the plink-maintenance mode, users write an ID to
"/proc/fs/aufs/plink_maint" (this path is defined as macros in
include/uapi/linux/aufs_type.h).  If someone else is unmounting the
aufs mount corresponding that ID, then the searcher task may find a
being freed sbinfo object.
The problem and the fix is very similar to previous commit
"aufs: bugfix, ignore the being freed dynop object".

Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
(cherry picked from commit 949b498ae30797b19b9e7ac9b230815f31ffe378)
---
 fs/aufs/procfs.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/fs/aufs/procfs.c b/fs/aufs/procfs.c
index 29c6377e888c..582dd486fcd3 100644
--- a/fs/aufs/procfs.c
+++ b/fs/aufs/procfs.c
@@ -61,8 +61,8 @@ static int au_procfs_plm_write_si(struct file *file, unsigned long id)
 	hlist_bl_lock(&au_sbilist);
 	hlist_bl_for_each_entry(sbinfo, pos, &au_sbilist, si_list)
 		if (id == sysaufs_si_id(sbinfo)) {
-			kobject_get(&sbinfo->si_kobj);
-			sb = sbinfo->si_sb;
+			if (kobject_get_unless_zero(&sbinfo->si_kobj))
+				sb = sbinfo->si_sb;
 			break;
 		}
 	hlist_bl_unlock(&au_sbilist);
-- 
2.22.0.214.g8dca754b1e

