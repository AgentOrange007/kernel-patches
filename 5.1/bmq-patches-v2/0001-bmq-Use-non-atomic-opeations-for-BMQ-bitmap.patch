From 82915a03e32767a6153e25f8c915d0cddf92b751 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Fri, 3 May 2019 12:13:24 +0800
Subject: [PATCH 1/7] bmq: Use non-atomic opeations for BMQ bitmap.

---
 kernel/sched/bmq.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index da767e230019..3298456cf209 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -607,7 +607,7 @@ static inline void dequeue_task(struct task_struct *p, struct rq *rq, int flags)
 
 	list_del(&p->bmq_node);
 	if (list_empty(&rq->queue.heads[p->bmq_idx])) {
-		clear_bit(p->bmq_idx, rq->queue.bitmap);
+		__clear_bit(p->bmq_idx, rq->queue.bitmap);
 		update_sched_rq_watermark(rq);
 	}
 	--rq->nr_running;
@@ -636,7 +636,7 @@ static inline void enqueue_task(struct task_struct *p, struct rq *rq, int flags)
 
 	p->bmq_idx = task_sched_prio(p);
 	bmq_add_task(p, &rq->queue, p->bmq_idx);
-	set_bit(p->bmq_idx, rq->queue.bitmap);
+	__set_bit(p->bmq_idx, rq->queue.bitmap);
 	update_sched_rq_watermark(rq);
 	++rq->nr_running;
 #ifdef CONFIG_SMP
@@ -670,9 +670,9 @@ static inline void requeue_task(struct task_struct *p, struct rq *rq)
 	bmq_add_task(p, &rq->queue, idx);
 	if (idx != p->bmq_idx) {
 		if (list_empty(&rq->queue.heads[p->bmq_idx]))
-			clear_bit(p->bmq_idx, rq->queue.bitmap);
+			__clear_bit(p->bmq_idx, rq->queue.bitmap);
 		p->bmq_idx = idx;
-		set_bit(p->bmq_idx, rq->queue.bitmap);
+		__set_bit(p->bmq_idx, rq->queue.bitmap);
 		update_sched_rq_watermark(rq);
 	}
 }
@@ -691,9 +691,9 @@ static inline int requeue_task_lazy(struct task_struct *p, struct rq *rq)
 	list_del(&p->bmq_node);
 	bmq_add_task(p, &rq->queue, idx);
 	if (list_empty(&rq->queue.heads[p->bmq_idx]))
-		clear_bit(p->bmq_idx, rq->queue.bitmap);
+		__clear_bit(p->bmq_idx, rq->queue.bitmap);
 	p->bmq_idx = idx;
-	set_bit(p->bmq_idx, rq->queue.bitmap);
+	__set_bit(p->bmq_idx, rq->queue.bitmap);
 	update_sched_rq_watermark(rq);
 
 	return 1;
-- 
2.22.0.rc1

