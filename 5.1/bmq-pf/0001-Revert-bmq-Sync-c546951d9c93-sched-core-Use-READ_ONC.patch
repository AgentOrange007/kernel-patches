From ff6c39122d3e1bbbf194ddb4daae627179057e3c Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Wed, 8 May 2019 07:09:57 +0200
Subject: [PATCH] Revert "bmq: [Sync] c546951d9c93 sched/core: Use
 READ_ONCE()/WRITE_ONCE() in move_queued_task()/task_rq_lock()"

This reverts commit 14102e7208bf621e574877d66d6f8d5b5d7e7c74.
---
 kernel/sched/bmq.c       | 13 ++++++-------
 kernel/sched/bmq_sched.h |  2 +-
 2 files changed, 7 insertions(+), 8 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index 1e4fcdf8df2d..da767e230019 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -409,12 +409,11 @@ struct rq *task_rq_lock(struct task_struct *p, struct rq_flags *rf)
 		 *					[L] ->on_rq
 		 *	RELEASE (rq->lock)
 		 *
-		 * If we observe the old CPU in task_rq_lock(), the acquire of
+		 * If we observe the old CPU in task_rq_lock, the acquire of
 		 * the old rq->lock will fully serialize against the stores.
 		 *
-		 * If we observe the new CPU in task_rq_lock(), the address
-		 * dependency headed by '[L] rq = task_rq()' and the acquire
-		 * will pair with the WMB to ensure we then also see migrating.
+		 * If we observe the new CPU in task_rq_lock, the acquire will
+		 * pair with the WMB to ensure we must then also see migrating.
 		 */
 		if (likely(rq == task_rq(p) && !task_on_rq_migrating(p))) {
 			return rq;
@@ -953,9 +952,9 @@ static inline void __set_task_cpu(struct task_struct *p, unsigned int cpu)
 	smp_wmb();
 
 #ifdef CONFIG_THREAD_INFO_IN_TASK
-	WRITE_ONCE(p->cpu, cpu);
+	p->cpu = cpu;
 #else
-	WRITE_ONCE(task_thread_info(p)->cpu, cpu);
+	task_thread_info(p)->cpu = cpu;
 #endif
 #endif
 }
@@ -1036,7 +1035,7 @@ static void detach_task(struct rq *rq, struct task_struct *p, int target_cpu)
 {
 	lockdep_assert_held(&rq->lock);
 
-	WRITE_ONCE(p->on_rq ,TASK_ON_RQ_MIGRATING);
+	p->on_rq = TASK_ON_RQ_MIGRATING;
 	if (task_contributes_to_load(p))
 		rq->nr_uninterruptible++;
 	dequeue_task(p, rq, 0);
diff --git a/kernel/sched/bmq_sched.h b/kernel/sched/bmq_sched.h
index 24fa90ca63d1..20dcf19ea057 100644
--- a/kernel/sched/bmq_sched.h
+++ b/kernel/sched/bmq_sched.h
@@ -56,7 +56,7 @@ static inline int task_on_rq_queued(struct task_struct *p)
 
 static inline int task_on_rq_migrating(struct task_struct *p)
 {
-	return READ_ONCE(p->on_rq) == TASK_ON_RQ_MIGRATING;
+	return p->on_rq == TASK_ON_RQ_MIGRATING;
 }
 
 enum {
-- 
2.21.0.777.g83232e3864

